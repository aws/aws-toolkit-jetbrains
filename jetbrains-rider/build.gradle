// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import org.jetbrains.intellij.tasks.PrepareSandboxTask

buildscript {
    ext.rd_version = rdGenVersion()

    logger.info("Using rd-gen: $rd_version")

    repositories {
        maven { url 'https://www.myget.org/F/rd-snapshots/maven/' }
        mavenCentral()
    }

    dependencies {
        classpath "com.jetbrains.rd:rd-gen:$rd_version"
    }
}

ext.resharperPluginPath = new File(projectDir, "ReSharper.AWS")
ext.resharperBuildPath = new File(project.buildDir, "dotnetBuild")

def buildConfiguration = ext.properties["BuildConfiguration"] ?: "Debug" // TODO: Do we ever want to make a release build?

apply plugin: 'org.jetbrains.intellij'
apply plugin: 'com.jetbrains.rdgen'

apply from: 'protocol.gradle'
apply from: 'backend.gradle'

dependencies {
    compile project(":jetbrains-core")
    testImplementation project(path: ":jetbrains-core", configuration: 'testArtifacts')
}

ext.riderGeneratedSources = "$buildDir/generated-src"

sourceSets {
    main.java.srcDir riderGeneratedSources
}

intellij {
    def parentIntellijTask = project(':jetbrains-core').intellij
    version ideSdkVersion("RD")
    pluginName parentIntellijTask.pluginName
    updateSinceUntilBuild parentIntellijTask.updateSinceUntilBuild

    // Workaround for https://youtrack.jetbrains.com/issue/IDEA-179607
    def extraPlugins = [ "rider-plugins-appender" ]
    plugins = idePlugins("RD") + extraPlugins

    // Disable downloading source to avoid issues related to Rider SDK naming that is missed in Idea
    // snapshots repository. The task is failed because if is unable to find related IC sources.
    downloadSources = false
    instrumentCode = false
}

def resharperParts = [
    "AWS.Daemon",
    "AWS.Localization",
    "AWS.Project",
    "AWS.Psi",
    "AWS.Settings"
]

// Tasks:
//
// `buildPlugin` depends on `prepareSandbox` task and then zips up the sandbox dir and puts the file in rider/build/distributions
// `runIde` depends on `prepareSandbox` task and then executes IJ inside the sandbox dir
// `prepareSandbox` depends on the standard Java `jar` and then copies everything into the sandbox dir

tasks.withType(PrepareSandboxTask).configureEach {
    dependsOn buildReSharperPlugin

    def files = resharperParts.collect {"$resharperBuildPath/bin/$it/$buildConfiguration/${it}.dll"} +
        resharperParts.collect {"$resharperBuildPath/bin/$it/$buildConfiguration/${it}.pdb"}
    from(files, {
        into("${intellij.pluginName}/dotnet")
    })
}

compileKotlin.dependsOn(generateModels)

test {
    systemProperty("log.dir", "${project.intellij.sandboxDirectory}-test/logs")
    useTestNG()
    environment("LOCAL_ENV_RUN", true)
    maxHeapSize("1024m")
}

tasks.integrationTest {
    useTestNG()
    environment("LOCAL_ENV_RUN", true)
}

jar {
    archiveBaseName.set('aws-intellij-toolkit-rider')
}
