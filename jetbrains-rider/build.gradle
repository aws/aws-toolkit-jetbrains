// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import groovy.json.JsonSlurper

apply plugin: 'org.jetbrains.intellij'

dependencies {
    compile project(":jetbrains-core")
    testCompile project(path: ":jetbrains-core", configuration: 'testArtifacts')
}

intellij {
    def parentIntellijTask = project(':jetbrains-core').intellij
    version ideVersion("RD")
    pluginName parentIntellijTask.pluginName
    updateSinceUntilBuild parentIntellijTask.updateSinceUntilBuild

    // Workaround for https://youtrack.jetbrains.com/issue/IDEA-179607
    def extraPlugins = [ "rider-plugins-appender" ]
    plugins = idePlugins("RD") + extraPlugins

    // Disable downloading source to avoid issues related to Rider SDK naming that is missed in Idea
    // snapshots repository. The task is failed due to unable to find related IC sources.
    downloadSources = false
    instrumentCode = false
}

test {
    useTestNG()
    ignoreFailures = true
}

runIde {
    systemProperty("aws.toolkits.enableTelemetry", false)
}

jar {
    archiveBaseName = 'aws-intellij-toolkit-rider'
}

task downloadLauncher() {
    doLast {
        println(file(".").canonicalPath)

        def launcherName = 'JetBrains.Rider.Debugger.Launcher'
        def launcherGz = new File(project.buildDir, "${launcherName}.tar.gz")

        // Check if new release is available
        def latestRelease = getLatestRelease("https://api.github.com/repos/JetBrains/${launcherName}/releases?per_page=10")
        if (compareReleases(latestRelease, riderDebuggerLauncherVersion) > 0) {
            throw new StopExecutionException(
                    "New Rider Debugger Launcher release is available. Please update the 'riderDebuggerLauncherVersion' version")
        }

        // Check if debugger launcher compiled exists
        def sdkFile = getRiderSdkRoot(project.configurations.idea)

        def libFile = new File(sdkFile as File, "lib")

        def reSharperHostSdkFile = new File(libFile, "ReSharperHost")
        assert(reSharperHostSdkFile.isDirectory())

        def amazonRunnerFile = new File(reSharperHostSdkFile, "Amazon.Runner")

        if (!amazonRunnerFile.isDirectory()) {

            // Check if old archive is present and delete it
            if (launcherGz.isFile()) {
                launcherGz.delete()
            }

            new URL("https://github.com/JetBrains/$launcherName/releases/download/$riderDebuggerLauncherVersion/${launcherName}.tar.gz")
                    .withInputStream { inputStream -> launcherGz.withOutputStream { it << inputStream } }
            println("Downloaded to ${launcherGz.canonicalPath}")

            assert(launcherGz.isFile())

            println("Extracting: ${launcherGz.canonicalPath} -> ${amazonRunnerFile.canonicalPath}")

            copy {
                from tarTree(resources.gzip(launcherGz.canonicalPath))
                into amazonRunnerFile.canonicalPath
            }
        }
    }
}

buildPlugin.dependsOn(downloadLauncher)

def getLatestRelease(urlAddress) {

    def jsonSlurper = new JsonSlurper()
    def latestRelease
    try {
        def url = new URL(urlAddress)
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setConnectTimeout(10000)
        connection.connect()
        if (connection.responseCode == 200) {
            def responseMessage = connection.content.withReader { stream -> stream.text }
            def releaseJson = jsonSlurper.parseText(responseMessage)
            latestRelease = releaseJson[0].tag_name
            return latestRelease
        } else {
            println("Unable to get latest release version")
        }
    }
    catch(ignored) {
        println("Cannot access repo: ${urlAddress}")
    }

    println("Return default release version: $riderDebuggerLauncherVersion")
    return riderDebuggerLauncherVersion
}

def compareReleases(thisVersion, otherVersion) {

    println("Comparing version $thisVersion with $otherVersion")

    List versionThis = thisVersion.tokenize('.')
    List versionOther = otherVersion.tokenize('.')

    def commonIndices = Math.min(versionThis.size(), versionOther.size())

    for (int index = 0; index < commonIndices; ++index) {
        def numberThis = versionThis[index].toInteger()
        def numberOther = versionOther[index].toInteger()

        if (numberThis != numberOther) {
            return numberThis <=> numberOther
        }
    }
    return versionThis.size() <=> versionOther.size()
}

def getRiderSdkRoot(baseDir) {
    def sdkFile = baseDir.find { it.canonicalPath.contains("riderRD-") }
    assert(sdkFile != null)

    while (!sdkFile.name.contains("riderRD")) {
        assert(sdkFile.parentFile != null)
        sdkFile = sdkFile.parentFile
    }

    assert(sdkFile.isDirectory())
    println("Sdk found at ${sdkFile.canonicalPath}")

    return sdkFile
}
