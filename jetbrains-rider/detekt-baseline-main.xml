<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>UnnecessaryApply:DotnetDebugUtils.kt$DotnetDebugUtils$apply { enableHeuristicPathResolve.set(true) }</ID>
    <ID>UnreachableCode:DotNetRuntimeUtils.kt$DotNetRuntimeUtils$return LambdaRuntime.fromValue("dotnetcore$versionString") ?: LambdaRuntime.fromValue("dotnet$versionString") ?: defaultDotNetCoreRuntime</ID>
    <ID>UnreachableCode:DotNetRuntimeUtils.kt$DotNetRuntimeUtils$val version = versions.maxByOrNull { it } ?: return defaultDotNetCoreRuntime</ID>
    <ID>UnreachableCode:DotNetRuntimeUtils.kt$DotNetRuntimeUtils$val versionString = version.split('.').take(2).joinToString(".")</ID>
    <ID>UnreachableCode:DotNetRuntimeUtils.kt$DotNetRuntimeUtils$val versions = runtimeList .filter { it.startsWith("Microsoft.NETCore.App") } .map { runtimeString -> val match = versionRegex.find(runtimeString) ?: return@map null match.groups[1]?.value ?: return@map null } .filterNotNull()</ID>
    <ID>UnsafeCallOnNullableType:DotnetDebugUtils.kt$DotnetDebugUtils$promise.get()!!</ID>
    <ID>UseCheckOrError:DebuggingSteps.kt$throw IllegalStateException( "Command did not return expected result within $duration, last attempt; cmd: '${cmd.commandLineString}', " + "exitCode: ${lastAttemptOutput?.exitCode}, stdOut: '${lastAttemptOutput?.stdout?.trim()}', stdErr: '${lastAttemptOutput?.stderr?.trim()}'" )</ID>
    <ID>UseCheckOrError:DotNetLambdaBuilder.kt$DotNetLambdaBuilder$throw IllegalStateException(message("lambda.run.configuration.handler_root_not_found"))</ID>
  </CurrentIssues>
</SmellBaseline>
