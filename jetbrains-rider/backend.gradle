// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

def backendGroup = 'backend'

ext.nugetConfigPath = new File(projectDir, "NuGet.Config")
ext.riderSdkVersionPropsPath = new File(resharperPluginPath, "RiderSdkPackageVersion.props")

task prepareBuildProps {
    group = backendGroup

    doLast {
        def riderSdkVersion = riderNugetSdkVersion()
        def configText = """<Project>
  <PropertyGroup>
    <RiderSDKVersion>[$riderSdkVersion]</RiderSDKVersion>
  </PropertyGroup>
</Project>
"""
        writeTextIfChanged(riderSdkVersionPropsPath, configText)
    }
}

task prepareNuGetConfig {
    group = backendGroup

    doLast {
        def nugetPath = getNugetPackagesPath()
        def configText = """<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <packageSources>
    <add key="resharper-sdk" value="${nugetPath}" />
  </packageSources>
</configuration>
"""
        writeTextIfChanged(nugetConfigPath, configText)
    }
}

task restoreReSharperPluginPackages() {
    group = backendGroup
    description = 'Restores packages for backend plugin'
    dependsOn prepareBuildProps, prepareNuGetConfig

    doLast {
        exec {
            executable = "dotnet"
            args = ["restore", "${resharperPluginPath.canonicalPath}/ReSharper.AWS.sln" ]
        }
    }
}

task buildReSharperPlugin {
    group = backendGroup
    description = 'Builds the full ReSharper backend plugin solution'
    dependsOn restoreReSharperPluginPackages, generateModel

    doLast {
        // Build using Mono MSBuild on Mac OS and Linux and use dotnet core MSBuild on Windows
        def isWindows = System.properties['os.name'].toLowerCase().contains('windows')
        def executableName = (isWindows) ? "dotnet" : "msbuild"
        def arguments = (isWindows) ? [ "build" ] : []
        arguments << "${resharperPluginPath.canonicalPath}/ReSharper.AWS.sln"
        arguments << "/p:DefineConstants=\"PROFILE_${resolveIdeProfileName().replace(".", "_")}\""
        exec {
            executable = executableName
            args = arguments
        }
    }

    outputs.files({
        fileTree(file("${resharperPluginPath.absolutePath}/src")).matching {
            include "**/bin/Debug/**/AWS*.dll"
            include "**/bin/Debug/**/AWS*.pdb"
            include "**/bin/Debug/**/AWS.DebuggerTools.exe"
            include "**/bin/Debug/**/AWS.DebuggerTools.runtimeconfig.json"
        }.collect()
    })
}

project.tasks.clean.dependsOn(project.tasks.cleanBuildReSharperPlugin)

private File getNugetPackagesPath() {
    def sdkPath = intellij.ideaDependency.classes
    println("SDK path: $sdkPath")

    // 2019
    def riderSdk = new File(sdkPath, "lib/ReSharperHostSdk")
    // 2020.1
    if (!riderSdk.exists()) {
        riderSdk = new File(sdkPath, "lib/DotNetSdkForRdPlugins")
    }

    println("NuGet packages: $riderSdk")
    if (!riderSdk.isDirectory()) throw new IllegalStateException("${riderSdk} does not exist or not a directory")

    return riderSdk
}

private static void writeTextIfChanged(File file, String content) {
    def bytes = content.bytes

    if (!file.isFile() || byteArrayToHexString(file.readBytes()) != byteArrayToHexString(bytes)) {
        println("Writing ${file.canonicalPath}")
        file.withOutputStream { it.write(bytes) }
    }
}

private static String byteArrayToHexString(byte[] byteArray) {
    return byteArray.encodeHex().toString()
}
