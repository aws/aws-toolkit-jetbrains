<!-- Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved. -->
<!-- SPDX-License-Identifier: Apache-2.0 -->

<idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude" require-restart="true">
    <id>aws.toolkit</id>
    <name>AWS Toolkit</name>
    <version>1.0</version>

    <!-- delete when fully split -->
    <xi:include href="/META-INF/plugin-shim.xml">
        <xi:fallback/>
    </xi:include>

    <description><![CDATA[
<h3><a href="https://aws.amazon.com/q">Amazon Q and CodeWhisperer</a></h3>
<p>CodeWhisperer is now part of Amazon Q. <a href="https://plugins.jetbrains.com/plugin/24267-amazon-q/">Try the Amazon Q extension.</a></p>

<h3><a href="https://codecatalyst.aws/explore">Amazon CodeCatalyst</a></h3>
<p>Unified software development service to quickly build and deliver applications on AWS.</p>

<ul>
    <li>
        <b>Dev Environments</b> - launch JetBrains IDEs in a cloud development environment, available on-demand in the cloud and automatically created with branch code and consistent project settings, providing faster setup, development, and testing
    </li>
</ul>
</p>

<h3>View, modify, and deploy AWS resources</h3>

<ul>
    <li>
        <b>Authentication</b> - Connect to AWS using static credentials, credential process, or AWS identity center
    </li>
    <li>
        <b>Resource Explorer</b> - View and manage AWS resources
    </li>
    <li>
        <b>Run/Debug Local Lambda Functions</b> - Locally test and step-through debug functions in a Lambda-like execution environment provided by the AWS SAM CLI. Supports Java, Python, Node.js, and .NET.
    </li>
    <li>
        <b>Deploy SAM-based Applications</b> - Package, deploy  track SAM-based applications
    </li>
    <li>
        <b>CloudWatch Logs</b> - View and search CloudWatch log streams
    </li>
    <li>
        <b>S3 Explorer</b> - Manage S3 buckets, and upload to/download from S3 buckets
    </li>
    <li>
        See the <a href="https://docs.aws.amazon.com/console/toolkit-for-jetbrains/">user guide</a> for a full list of services and features supported
    </li>
</ul>

<h3>Getting started</h3>
<img src="https://raw.githubusercontent.com/aws/aws-toolkit-jetbrains/main/marketplaceGifs/JB-auth-Toolkit.gif"></img>

<h3>About</h3>
<p>
    The AWS Toolkit for JetBrains makes it easier to write applications built on <a href="https://aws.amazon.com/">Amazon Web Services</a>.
</p>
<p>
    If you come across bugs with the toolkit or have feature requests, please raise an <a href="https://github.com/aws/aws-toolkit-jetbrains/issues">issue</a> on our GitHub repository.
</p>

<p>
    See the <a href="https://docs.aws.amazon.com/console/toolkit-for-jetbrains/">user guide</a> for how to get started
</p>
    ]]></description>

    <vendor email="aws-toolkit-jetbrains@amazon.com" url="https://github.com/aws/aws-toolkit-jetbrains">AWS</vendor>
    <!-- 223.7571.182 is 2022.3 Stable -->
    <idea-version since-build="223.7571.182" until-build="224.*"/>

    <!-- a 'resource-bundle' declaration under <idea-plugin> declares the global default for the entire plugin -->
    <!-- use the 'resource-bundle' attribute in 'actions' tag if another bundle is needed -->
    <resource-bundle>software.aws.toolkits.resources.MessagesBundle</resource-bundle>

    <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <!-- All required dependencies have to be defined here, you can't define more in an optional config-file,
        See PluginManagerCore#mergeOptionalConfigs -->
    <!-- However, required deps declared though XIncludes are acceptable as long as they can be resolved in the same JAR -->
    <depends>com.intellij.modules.platform</depends>

    <!-- platform-specific required dependencies go in their respective includes -->
    <!-- Gateway build will drop plugin-intellij and insert its own patched XML -->
    <xi:include href="/META-INF/plugin-intellij.xml">
        <xi:fallback/>
    </xi:include>

    <xi:include href="/META-INF/plugin-gateway.xml">
        <xi:fallback/>
    </xi:include>

    <xi:include href="/META-INF/remoteDev.xml">
        <xi:fallback/>
    </xi:include>

    <!-- global optional dependencies here, otherwise in their respective optional includes -->
    <depends optional="true">org.jetbrains.idea.maven</depends>
    <depends optional="true">org.jetbrains.plugins.gradle</depends>
    <depends optional="true" config-file="ext-terminal.xml">org.jetbrains.plugins.terminal</depends>
    <depends optional="true">com.intellij.modules.externalSystem</depends>
    <depends optional="true" config-file="ext-yaml.xml">org.jetbrains.plugins.yaml</depends>
    <depends optional="true" config-file="ext-docker.xml">Docker</depends>
    <depends optional="true" config-file="ext-java.xml">com.intellij.modules.java</depends>
    <depends optional="true" config-file="ext-python.xml">com.intellij.modules.python</depends>
    <depends optional="true" config-file="ext-json.xml">com.intellij.modules.json</depends>
    <depends optional="true" config-file="ext-gateway.xml">com.jetbrains.gateway</depends>

    <xi:include href="services/caws.xml" xpointer="xpointer(/idea-plugin/*)">
        <xi:fallback/>
    </xi:include>

    <xi:include href="/META-INF/IU.xml" xpointer="xpointer(/idea-plugin/*)">
        <xi:fallback/>
    </xi:include>

    <xi:include href="/META-INF/RD.xml" xpointer="xpointer(/idea-plugin/*)">
        <xi:fallback/>
    </xi:include>

    <xi:include href="/META-INF/change-notes.xml" xpointer="xpointer(/idea-plugin/*)">
        <xi:fallback/>
    </xi:include>

    <projectListeners>
        <listener class="software.aws.toolkits.jetbrains.core.credentials.CredentialStatusNotification"
                  topic="software.aws.toolkits.jetbrains.core.credentials.ConnectionSettingsStateChangeNotifier"/>
        <listener class="software.aws.toolkits.jetbrains.services.dynamic.DynamicResourceStateChangedNotificationHandler"
                  topic="software.aws.toolkits.jetbrains.services.dynamic.DynamicResourceStateMutationHandler"/>
        <listener class="software.aws.toolkits.jetbrains.core.credentials.RefreshExplorerCredentials"
                  topic="software.aws.toolkits.jetbrains.core.credentials.ChangeConnectionSettingIfValid"/>
        <listener class="software.aws.toolkits.jetbrains.services.dynamic.SuggestEditExperimentListener"
                  topic="com.intellij.openapi.fileEditor.FileEditorManagerListener"/>
        <listener class="software.aws.toolkits.jetbrains.services.dynamic.UpdateOnExperimentState"
                  topic="software.aws.toolkits.jetbrains.core.experiments.ToolkitExperimentStateChangedListener"/>
    </projectListeners>

    <extensionPoints>
        <extensionPoint name="lambda.runtimeGroup" interface="software.aws.toolkits.jetbrains.services.lambda.RuntimeGroup" dynamic="true"/>

        <extensionPoint name="lambda.builder" beanClass="software.aws.toolkits.jetbrains.core.IdBasedExtensionPoint" dynamic="true">
            <with attribute="implementationClass" implements="software.aws.toolkits.jetbrains.services.lambda.LambdaBuilder"/>
        </extensionPoint>

        <extensionPoint name="lambda.sam.runtimeDebugSupport" beanClass="software.aws.toolkits.jetbrains.core.IdBasedExtensionPoint" dynamic="true">
            <with attribute="implementationClass" implements="software.aws.toolkits.jetbrains.services.lambda.execution.sam.RuntimeDebugSupport"/>
        </extensionPoint>

        <extensionPoint name="lambda.sam.imageDebuggerSupport" interface="software.aws.toolkits.jetbrains.services.lambda.execution.sam.ImageDebugSupport"
                        dynamic="true"/>

        <extensionPoint name="lambda.handlerResolver" beanClass="software.aws.toolkits.jetbrains.core.IdBasedExtensionPoint" dynamic="true">
            <with attribute="implementationClass" implements="software.aws.toolkits.jetbrains.services.lambda.LambdaHandlerResolver"/>
        </extensionPoint>

        <extensionPoint name="lambda.sam.projectWizard" beanClass="software.aws.toolkits.jetbrains.core.IdBasedExtensionPoint" dynamic="true">
            <with attribute="implementationClass" implements="software.aws.toolkits.jetbrains.services.lambda.wizard.SamProjectWizard"/>
        </extensionPoint>

        <extensionPoint name="lambda.handlerCompletion" beanClass="software.aws.toolkits.jetbrains.core.IdBasedExtensionPoint" dynamic="true">
            <with attribute="implementationClass" implements="software.aws.toolkits.jetbrains.services.lambda.completion.HandlerCompletion"/>
        </extensionPoint>

        <extensionPoint name="executable" interface="software.aws.toolkits.jetbrains.core.executables.ExecutableType" dynamic="true"/>

        <extensionPoint name="explorer.serviceNode" interface="software.aws.toolkits.jetbrains.core.explorer.nodes.AwsExplorerServiceNode" dynamic="true"/>
        <extensionPoint name="explorer.nodeProcessor" interface="software.aws.toolkits.jetbrains.core.explorer.AwsExplorerNodeProcessor" dynamic="true"/>
        <extensionPoint name="explorer.treeStructure" interface="software.aws.toolkits.jetbrains.core.explorer.AwsExplorerTreeStructureProvider"
                        dynamic="true"/>
        <extensionPoint name="experiment" interface="software.aws.toolkits.jetbrains.core.experiments.ToolkitExperiment" dynamic="true"/>
        <extensionPoint name="tool" interface="software.aws.toolkits.jetbrains.core.tools.ToolType" dynamic="true"/>
        <extensionPoint name="devTools.serviceNode" interface="software.aws.toolkits.jetbrains.core.explorer.devToolsTab.nodes.DevToolsServiceNode" dynamic="true"/>
        <extensionPoint name="devTools.treeStructure" interface="software.aws.toolkits.jetbrains.core.explorer.devToolsTab.DevToolsTreeStructureProvider" dynamic="true"/>
    </extensionPoints>

    <extensions defaultExtensionNs="com.intellij">
        <applicationService serviceImplementation="software.aws.toolkits.jetbrains.settings.EcsExecCommandSettings"/>
        <applicationService serviceImplementation="software.aws.toolkits.jetbrains.settings.SamDisplayDevModeWarningSettings"/>

        <applicationService serviceInterface="software.aws.toolkits.jetbrains.settings.DynamicResourcesSettings"
                            serviceImplementation="software.aws.toolkits.jetbrains.settings.DefaultDynamicResourcesSettings"/>
        <applicationService serviceImplementation="software.aws.toolkits.jetbrains.settings.GettingStartedSettings"/>

        <projectService serviceImplementation="software.aws.toolkits.jetbrains.settings.LambdaSettings"/>

        <moduleService serviceImplementation="software.aws.toolkits.jetbrains.settings.DeploySettings"/>
        <moduleService serviceImplementation="software.aws.toolkits.jetbrains.settings.SyncSettings"/>
        <applicationService serviceImplementation="software.aws.toolkits.jetbrains.settings.UpdateLambdaState"/>

        <!-- application-level ToolkitConnectionManager is gateway-only -->
        <applicationService serviceInterface="software.aws.toolkits.jetbrains.core.credentials.ToolkitConnectionManager"
                            serviceImplementation="software.aws.toolkits.jetbrains.core.credentials.DefaultToolkitConnectionManager"/>

        <projectService serviceImplementation="software.aws.toolkits.jetbrains.services.dynamic.CreateResourceFileStatusHandler"/>

        <statusBarWidgetFactory id="AwsSettingsPanel" implementation="software.aws.toolkits.jetbrains.core.credentials.AwsSettingsPanelInstaller"/>
        <statusBarWidgetFactory id="CawsSpaceProjectInfo" implementation="software.aws.toolkits.jetbrains.services.caws.CawsStatusBarInstaller"/>

        <postStartupActivity implementation="software.aws.toolkits.jetbrains.core.executables.ExecutableLoader"/>
        <postStartupActivity implementation="software.aws.toolkits.jetbrains.core.startup.QMigrationActivity"/>
        <postStartupActivity implementation="software.aws.toolkits.jetbrains.core.startup.ToolWindowStartupActivity"/>

        <applicationService serviceInterface="software.aws.toolkits.jetbrains.core.executables.ExecutableManager"
                            serviceImplementation="software.aws.toolkits.jetbrains.core.executables.DefaultExecutableManager"/>
        <applicationService serviceImplementation="software.aws.toolkits.jetbrains.core.tools.ToolSettings"/>
        <applicationService serviceInterface="software.aws.toolkits.jetbrains.core.tools.ToolManager"
                            serviceImplementation="software.aws.toolkits.jetbrains.core.tools.DefaultToolManager"
                            testServiceImplementation="software.aws.toolkits.jetbrains.core.tools.MockToolManager"/>

        <applicationService serviceImplementation="software.aws.toolkits.jetbrains.services.dynamic.DynamicResourceSchemaMapping"/>
        <applicationService serviceImplementation="software.aws.toolkits.jetbrains.services.dynamic.DynamicResourceSupportedTypes"/>

        <projectService serviceImplementation="software.aws.toolkits.jetbrains.services.dynamic.DynamicResourceUpdateManager"/>
        <applicationService serviceImplementation="software.aws.toolkits.jetbrains.core.experiments.ToolkitExperimentManager"/>

        <projectService serviceImplementation="software.aws.toolkits.jetbrains.core.explorer.ExplorerToolWindow"/>
        <projectService serviceImplementation="software.aws.toolkits.jetbrains.services.cloudformation.stack.StackWindowManager"/>
        <projectService serviceImplementation="software.aws.toolkits.jetbrains.services.lambda.validation.LambdaHandlerValidator"/>
        <projectService serviceImplementation="software.aws.toolkits.jetbrains.services.cloudformation.toolwindow.CloudFormationToolWindow"/>
        <projectService serviceImplementation="software.aws.toolkits.jetbrains.services.cloudwatch.logs.CloudWatchLogWindow"/>
        <projectService serviceImplementation="software.aws.toolkits.jetbrains.services.sqs.toolwindow.SqsWindow"/>
        <projectService serviceImplementation="software.aws.toolkits.jetbrains.core.explorer.devToolsTab.DevToolsToolWindow"/>
        <projectService serviceImplementation="software.aws.toolkits.jetbrains.core.explorer.AwsToolkitExplorerToolWindow"/>
        <projectService serviceImplementation="software.aws.toolkits.jetbrains.core.explorer.cwqTab.CodewhispererQToolWindow"/>

        <editorNotificationProvider implementation="software.aws.toolkits.jetbrains.core.credentials.CredentialsFileHelpNotificationProvider"/>
        <editorNotificationProvider implementation="software.aws.toolkits.jetbrains.services.dynamic.DynamicResourceFileActionProvider"/>

        <toolWindow id="aws.toolkit.explorer" anchor="left" secondary="true"
                    factoryClass="software.aws.toolkits.jetbrains.core.explorer.AwsToolkitExplorerFactory"
                    icon="AwsIcons.Logos.AWS_SMILE_SMALL"/>

        <toolWindow id="aws.cloudformation" anchor="bottom" doNotActivateOnStart="true" canCloseContents="true"
                    factoryClass="software.aws.toolkits.jetbrains.services.cloudformation.toolwindow.CloudFormationToolWindowFactory"
                    icon="AwsIcons.Logos.CLOUD_FORMATION_TOOL"/>

        <toolWindow id="aws.cloudwatchlogs" anchor="bottom" doNotActivateOnStart="true" canCloseContents="true"
                    factoryClass="software.aws.toolkits.jetbrains.services.cloudwatch.logs.toolwindow.CloudWatchLogsToolWindowFactory"
                    icon="AwsIcons.Resources.CloudWatch.LOGS_TOOL_WINDOW"/>

        <toolWindow id="aws.sqs" anchor="bottom" doNotActivateOnStart="true" canCloseContents="true"
                    factoryClass="software.aws.toolkits.jetbrains.services.sqs.toolwindow.SqsWindowFactory" icon="AwsIcons.Resources.Sqs.SQS_TOOL_WINDOW"/>

        <!-- plugin configurables -->
        <applicationConfigurable
            parentId="aws"
            id="aws.toolkit"
            bundle="software.aws.toolkits.resources.MessagesBundle"
            key="aws.settings.toolkit.configurable.title"
            instance="software.aws.toolkits.jetbrains.settings.ToolkitSettingsConfigurable"
        />
        <projectConfigurable
            parentId="aws.toolkit"
            id="aws.lambda"
            bundle="software.aws.toolkits.resources.MessagesBundle"
            key="aws.settings.lambda.configurable.title"
            instance="software.aws.toolkits.jetbrains.services.lambda.settings.LambdaSettingsConfigurable"
        />
        <applicationConfigurable
            parentId="aws.toolkit"
            id="aws.dynamicresources"
            bundle="software.aws.toolkits.resources.MessagesBundle"
            key="aws.settings.dynamic_resources_configurable.title"
            instance="software.aws.toolkits.jetbrains.settings.DynamicResourcesConfigurable"
        />

        <programRunner implementation="software.aws.toolkits.jetbrains.services.lambda.execution.sam.SamInvokeRunner"/>
        <programRunner implementation="software.aws.toolkits.jetbrains.services.lambda.execution.remote.RemoteLambdaRunner"/>

        <runLineMarkerContributor language="yaml"
                                  implementationClass="software.aws.toolkits.jetbrains.services.lambda.execution.template.YamlLambdaRunLineMarkerContributor"/>
        <configurationType implementation="software.aws.toolkits.jetbrains.services.lambda.execution.LambdaRunConfigurationType"/>
        <runConfigurationProducer implementation="software.aws.toolkits.jetbrains.services.lambda.execution.local.LocalLambdaRunConfigurationProducer"/>
        <runConfigurationProducer implementation="software.aws.toolkits.jetbrains.services.lambda.execution.remote.RemoteLambdaRunConfigurationProducer"/>

        <!-- Min Version Notice -->
        <postStartupActivity implementation="software.aws.toolkits.jetbrains.core.notification.MinimumVersionChange"/>
        <notificationGroup id="aws.toolkit_deprecation" displayType="STICKY_BALLOON" key="aws.toolkit_deprecation.title"/>
        <notificationGroup id="aws.toolkit_telemetry" displayType="STICKY_BALLOON" key="aws.settings.telemetry.prompt.title"/>

        <!--Sticky notifications -->
        <notificationGroup id="aws.toolkit_sticky" displayType="STICKY_BALLOON" key="aws.settings.title"/>

        <!-- Project Wizard components -->
        <directoryProjectGenerator implementation="software.aws.toolkits.jetbrains.services.lambda.wizard.SamProjectGenerator"/>
        <projectTemplatesFactory implementation="software.aws.toolkits.jetbrains.services.lambda.wizard.SamProjectGeneratorIntelliJAdapter"/>

        <!-- S3 -->
        <fileEditorProvider implementation="software.aws.toolkits.jetbrains.services.s3.S3ViewerEditorProvider"/>
        <!-- See this post why order="first" is required https://intellij-support.jetbrains.com/hc/en-us/community/posts/360003460619-fileIconProvider-is-not-showing-Icon-for-custom-LightVirtualFile -->
        <fileIconProvider order="first" implementation="software.aws.toolkits.jetbrains.services.s3.editor.S3FileIconProvider"/>

        <!-- DynamoDB -->
        <fileEditorProvider implementation="software.aws.toolkits.jetbrains.services.dynamodb.editor.DynamoDbTableEditorProvider"/>
        <fileIconProvider order="first" implementation="software.aws.toolkits.jetbrains.services.dynamodb.editor.DynamoDbFileIconProvider"/>

        <!-- Getting Started -->
        <fileEditorProvider implementation="software.aws.toolkits.jetbrains.core.gettingstarted.editor.GettingStartedEditorProvider"/>
        <fileIconProvider order="first" implementation="software.aws.toolkits.jetbrains.core.gettingstarted.editor.GettingStartedFileIconProvider"/>

        <!-- Open in Console -->
        <referenceProviderType key="commentsReferenceProvider"
                               implementationClass="software.aws.toolkits.jetbrains.services.federation.psireferences.ArnPsiReferenceProvider"/>
        <psi.referenceContributor id="arnContributor"
                                  implementation="software.aws.toolkits.jetbrains.services.federation.psireferences.ArnPsiReferenceContributor"/>
        <documentationProvider implementation="software.aws.toolkits.jetbrains.services.federation.psireferences.ArnReferenceDocumentationProvider"/>

        <registryKey key="aws.credentialProcess.timeout" description="AWS Credential Process timeout (ms)" restartRequired="false" defaultValue="30000"/>
        <registryKey key="aws.debuggerAttach.timeout" description="Time allowed for debuggers to attach before timing out (ms)" restartRequired="false"
                     defaultValue="60000"/>
        <registryKey key="aws.codecatalyst.endpoint" description="API endpoint for the CodeCatalyst service" restartRequired="true" defaultValue=""/>

    </extensions>

    <extensions defaultExtensionNs="aws.toolkit">
        <credentialProviderFactory implementation="software.aws.toolkits.jetbrains.core.credentials.metadataservice.ContainerCredentialProviderFactory"/>
        <credentialProviderFactory implementation="software.aws.toolkits.jetbrains.core.credentials.metadataservice.InstanceRoleCredentialProviderFactory"/>

        <!-- Executables -->
        <executable implementation="software.aws.toolkits.jetbrains.services.lambda.sam.SamExecutable"/>

        <!-- Explorer nodes -->
        <explorer.treeStructure implementation="software.aws.toolkits.jetbrains.services.dynamic.explorer.DynamicResourceTreeStructureProvider"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.AppRunnerExplorerRootNode"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.CloudFormationExplorerRootNode"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.CloudWatchRootNode"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.DynamoDbExplorerRootNode"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.LambdaExplorerRootNode"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.S3ExplorerRootNode"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.EcrExplorerRootNode"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.EcsExplorerRootNode"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.SchemasExplorerRootNode"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.SqsExplorerRootNode"/>
        <explorer.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.nodes.OtherResourcesRootNode"/>

        <!-- DevTools nodes-->
        <devTools.serviceNode implementation="software.aws.toolkits.jetbrains.core.explorer.devToolsTab.nodes.CawsServiceNode"/>

        <!-- Experiments -->
        <experiment implementation="software.aws.toolkits.jetbrains.services.ecs.EcsExecExperiment"/>
        <experiment implementation="software.aws.toolkits.jetbrains.services.dynamic.JsonResourceModificationExperiment"/>

        <tool implementation="software.aws.toolkits.jetbrains.services.ssm.SsmPlugin"/>

        <sdk.clientCustomizer implementation="software.aws.toolkits.jetbrains.services.caws.CawsClientCustomizer"/>
    </extensions>

    <actions resource-bundle="software.aws.toolkits.resources.MessagesBundle">
        <action id="aws.toolkit.open.telemetry.viewer" class="software.aws.toolkits.jetbrains.services.telemetry.OpenTelemetryAction"/>
        <action id="aws.settings.refresh" class="software.aws.toolkits.jetbrains.core.credentials.RefreshConnectionAction"/>
        <action id="aws.toolkit.showFeedback" class="software.aws.toolkits.jetbrains.ui.feedback.ShowFeedbackDialogAction"/>
        <action id="aws.toolkit.open.arn.browser" class="software.aws.toolkits.jetbrains.services.federation.OpenArnInConsoleEditorPopupAction">
            <add-to-group group-id="EditorPopupMenu"/>
        </action>

        <action id="aws.toolkit.toolwindow.explorer.newConnection"
                class="software.aws.toolkits.jetbrains.core.credentials.actions.ExplorerNewConnectionAction"/>

        <action id="aws.toolkit.toolwindow.credentials.rightGroup.more"
                class="software.aws.toolkits.jetbrains.core.credentials.actions.MoreConnectionActionsAction"/>
        <group id="aws.toolkit.toolwindow.credentials.rightGroup.more.group">
            <action id="aws.toolkit.toolwindow.newConnection" class="software.aws.toolkits.jetbrains.core.credentials.actions.NewConnectionAction"/>
        </group>
        <action id="aws.toolkit.toolwindow.credentials.rightGroup.help" class="software.aws.toolkits.jetbrains.core.credentials.actions.CredentialsHelpAction"/>

        <group id="aws.toolkit.explorer.titleBar" popup="false" compact="true">
            <reference id="aws.settings.refresh"/>
            <separator/>
            <reference id="aws.toolkit.showFeedback"/>
        </group>

        <group id="aws.toolkit.explorer.dynamodb.table" popup="true" compact="false">
            <action id="aws.toolkit.dynamodb.delete_table" class="software.aws.toolkits.jetbrains.services.dynamodb.actions.DeleteTableAction"
                    icon="AllIcons.Actions.Cancel"/>
        </group>

        <group id="aws.toolkit.explorer.ecr" popup="true" compact="false">
            <action id="ecr.repository.create" class="software.aws.toolkits.jetbrains.services.ecr.actions.CreateRepositoryAction"/>
        </group>

        <group id="aws.toolkit.explorer.ecr.repository" popup="true" compact="false">
            <group id="ecr.repository.push.group"/>
            <action id="ecr.repository.copyUri" class="software.aws.toolkits.jetbrains.services.ecr.actions.CopyRepositoryUriAction"/>
            <separator/>
            <action id="ecr.repository.delete" class="software.aws.toolkits.jetbrains.services.ecr.actions.DeleteRepositoryAction"/>
        </group>

        <group id="aws.toolkit.explorer.ecr.tag" popup="true" compact="false">
            <action id="ecr.image.createAppRunnerService" class="software.aws.toolkits.jetbrains.services.ecr.actions.CreateAppRunnerServiceAction"/>
            <action id="ecr.image.copyUri" class="software.aws.toolkits.jetbrains.services.ecr.actions.CopyTagUriAction"/>
            <separator/>
            <action id="ecr.image.delete" class="software.aws.toolkits.jetbrains.services.ecr.actions.DeleteTagAction"/>
        </group>

        <group id="aws.toolkit.explorer.ecs.cluster" popup="true" compact="false">
            <action id="ecs.service.showLogGroup" class="software.aws.toolkits.jetbrains.services.ecs.actions.EcsLogGroupAction"/>
            <separator/>
        </group>

        <group id="aws.toolkit.explorer.ecs.service" popup="true" compact="false">
            <reference ref="RunContextGroupInner"/>
            <group id="ecs.container.actions" compact="true" class="software.aws.toolkits.jetbrains.services.ecs.ServiceContainerActions"/>
            <separator/>
            <action id="ecs.exec.enable" class="software.aws.toolkits.jetbrains.services.ecs.exec.EnableEcsExecuteCommand"/>
            <action id="ecs.exec.disable" class="software.aws.toolkits.jetbrains.services.ecs.exec.DisableEcsExecuteCommand"/>
            <separator/>
        </group>

        <group id="aws.toolkit.explorer.apprunner" popup="true" compact="false">
            <action id="apprunner.service.create" class="software.aws.toolkits.jetbrains.services.apprunner.actions.CreateServiceAction"/>
        </group>

        <group id="aws.toolkit.explorer.apprunner.service" popup="true" compact="false">
            <action id="apprunner.service.deploy" class="software.aws.toolkits.jetbrains.services.apprunner.actions.DeployAction"/>
            <action id="apprunner.service.pause" class="software.aws.toolkits.jetbrains.services.apprunner.actions.PauseServiceAction"/>
            <action id="apprunner.service.resume" class="software.aws.toolkits.jetbrains.services.apprunner.actions.ResumeServiceAction"/>
            <separator/>
            <action id="apprunner.service.openServiceUri" class="software.aws.toolkits.jetbrains.services.apprunner.actions.OpenServiceUrlAction"/>
            <action id="apprunner.service.copyServiceUri" class="software.aws.toolkits.jetbrains.services.apprunner.actions.CopyServiceUrlAction"/>
            <separator/>
            <action id="apprunner.service.showSystemLogs" class="software.aws.toolkits.jetbrains.services.apprunner.actions.ViewSystemLogsAction"/>
            <action id="apprunner.service.showApplicationLogs" class="software.aws.toolkits.jetbrains.services.apprunner.actions.ViewApplicationLogsAction"/>
            <separator/>
            <action id="apprunner.service.delete" class="software.aws.toolkits.jetbrains.services.apprunner.actions.DeleteServiceAction"/>
        </group>

        <group id="aws.toolkit.explorer.lambda" popup="true" compact="false">
            <action id="lambda.function.create" class="software.aws.toolkits.jetbrains.services.lambda.upload.CreateLambdaFunctionAction"/>
        </group>

        <group id="aws.toolkit.explorer.lambda.function" popup="false" compact="false">
            <reference ref="RunContextGroupInner"/>
            <separator/>
            <action id="lambda.function.gotohandler"
                    class="software.aws.toolkits.jetbrains.services.lambda.actions.GoToHandlerAction"/>
            <separator/>
            <action id="lambda.function.updateConfiguration"
                    class="software.aws.toolkits.jetbrains.services.lambda.actions.UpdateFunctionConfigurationAction"/>
            <action id="lambda.function.updateCode" class="software.aws.toolkits.jetbrains.services.lambda.actions.UpdateFunctionCodeAction"/>
            <separator/>
            <action id="lambda.function.viewLogStream" class="software.aws.toolkits.jetbrains.services.lambda.actions.LambdaLogGroupAction"/>
            <separator/>
            <action id="lambda.function.delete"
                    class="software.aws.toolkits.jetbrains.services.lambda.actions.DeleteFunctionAction"/>
        </group>
        
        <group id="aws.toolkit.explorer.cloudformation.stack" popup="true" compact="false">
            <action id="cloudformation.stack.view"
                    class="software.aws.toolkits.jetbrains.services.cloudformation.stack.OpenStackUiAction"/>
            <separator/>
            <action id="cloudformation.stack.delete"
                    class="software.aws.toolkits.jetbrains.services.cloudformation.actions.DeleteStackAction"/>
        </group>


        <group id="aws.toolkit.explorer.dynamic.resource.type" popup="true" compact="false">
            <action id="dynamic.resource.type.explorer.createResource"
                    class="software.aws.toolkits.jetbrains.services.dynamic.explorer.actions.CreateResourceAction"/>
            <action id="dynamic.resource.type.explorer.viewDocumentation"
                    class="software.aws.toolkits.jetbrains.services.dynamic.explorer.actions.ViewDocumentationAction"/>
        </group>

        <group id="aws.toolkit.dynamic.resource.editor">
            <action id="dynamic.resource.editor.submitResourceCreationRequest"
                    class="software.aws.toolkits.jetbrains.services.dynamic.editor.actions.SubmitResourceCreationRequestAction"/>
            <action id="dynamic.resource.editor.enableEditingResource"
                    class="software.aws.toolkits.jetbrains.services.dynamic.editor.actions.EnableEditingResourceAction"/>
            <action id="dynamic.resource.editor.submitResourceUpdateRequest"
                    class="software.aws.toolkits.jetbrains.services.dynamic.editor.actions.SubmitResourceUpdateRequestAction"/>
        </group>

        <group id="aws.toolkit.explorer.dynamic.more.resources" popup="true" compact="false">
            <action id="dynamic.resource.addResourcesToExplorerAction"
                    class="software.aws.toolkits.jetbrains.services.dynamic.explorer.actions.AddResourcesToExplorerAction"/>
        </group>

        <group id="aws.toolkit.explorer.dynamic.resource" popup="true" compact="false">
            <action id="dynamic.resource.explorer.openReadOnlyAction"
                    class="software.aws.toolkits.jetbrains.services.dynamic.explorer.actions.OpenReadOnlyFileAction"/>
            <action id="dynamic.resource.explorer.openFileForUpdateAction"
                    class="software.aws.toolkits.jetbrains.services.dynamic.explorer.actions.OpenFileForUpdateAction"/>
            <separator/>
            <action id="dynamic.resource.explorer.copy.identifier"
                    class="software.aws.toolkits.jetbrains.services.dynamic.explorer.actions.CopyIdentifierAction"/>
            <separator/>
            <action id="dynamic.resource.explorer.dynamicResourceDeleteResourceAction"
                    class="software.aws.toolkits.jetbrains.services.dynamic.explorer.actions.DynamicResourceDeleteResourceAction"/>
        </group>

        <group id="aws.toolkit.explorer.logs.group" popup="true" compact="false">
            <action id="cloudwatch.logs.open"
                    class="software.aws.toolkits.jetbrains.services.cloudwatch.logs.actions.OpenLogGroupAction"/>
            <action id="cloudwatch.logs.query.group"
                    class="software.aws.toolkits.jetbrains.services.cloudwatch.logs.insights.actions.QueryGroupAction"/>
            <separator/>
            <action id="cloudwatch.logs.delete.group"
                    class="software.aws.toolkits.jetbrains.services.cloudwatch.logs.actions.DeleteGroupAction"/>
        </group>

        <group id="aws.toolkit.explorer.s3" popup="false" compact="false">
            <action id="s3.create.bucket"
                    class="software.aws.toolkits.jetbrains.services.s3.bucketActions.CreateBucketAction"/>
            <action id="s3.view.bucket"
                    class="software.aws.toolkits.jetbrains.services.s3.bucketActions.ViewBucketAction"/>
        </group>

        <group id="aws.toolkit.explorer.s3.bucket" popup="true" compact="false">
            <action id="aws.toolkit.s3.open.bucket.viewer"
                    class="software.aws.toolkits.jetbrains.services.s3.bucketActions.OpenBucketViewerAction"/>
            <action id="aws.toolkit.s3.open.bucket.viewer.prefixed"
                    class="software.aws.toolkits.jetbrains.services.s3.bucketActions.OpenPrefixedBucketViewerAction"/>
            <separator/>
            <action id="s3.copy.bucketname.check"
                    class="software.aws.toolkits.jetbrains.services.s3.bucketActions.CopyBucketNameAction"/>
            <separator/>
            <action id="s3.delete.bucket"
                    class="software.aws.toolkits.jetbrains.services.s3.bucketActions.DeleteBucketAction"/>
        </group>

        <group id="aws.toolkit.explorer.schemas" popup="true" compact="false">
            <action id="schemas.search"
                    class="software.aws.toolkits.jetbrains.services.schemas.search.SearchSchemasAction"/>
        </group>

        <group id="aws.toolkit.explorer.schemas.registry" popup="false" compact="true">
            <action id="schemas.registry.search"
                    class="software.aws.toolkits.jetbrains.services.schemas.search.SearchSchemasInRegistryAction"/>
        </group>

        <group id="aws.toolkit.explorer.schemas.schema" popup="false" compact="true">
            <action id="schemas.schema.view"
                    class="software.aws.toolkits.jetbrains.services.schemas.ViewSchemaAction"/>
            <separator/>
            <action id="schemas.schema.downloadCode"
                    class="software.aws.toolkits.jetbrains.services.schemas.code.DownloadCodeForSchemaAction"/>
        </group>

        <group id="aws.toolkit.explorer.sqs" popup="true" compact="false">
            <action id="sqs.create.queue"
                    class="software.aws.toolkits.jetbrains.services.sqs.actions.CreateQueueAction"/>
        </group>

        <group id="aws.toolkit.explorer.sqs.queue" popup="true" compact="false">
            <action id="sqs.poll.message" class="software.aws.toolkits.jetbrains.services.sqs.actions.PollMessageAction"/>
            <action id="sqs.send.message" class="software.aws.toolkits.jetbrains.services.sqs.actions.SendMessageAction"/>
            <action id="sqs.purge" class="software.aws.toolkits.jetbrains.services.sqs.actions.PurgeQueueNodeAction"/>
            <separator/>
            <action id="sqs.configure.lambda" class="software.aws.toolkits.jetbrains.services.sqs.actions.ConfigureLambdaAction"/>
            <action id="sqs.subscribe.sns" class="software.aws.toolkits.jetbrains.services.sqs.actions.SubscribeSnsAction"/>
            <separator/>
            <action id="sqs.edit.attributes" class="software.aws.toolkits.jetbrains.services.sqs.actions.EditAttributesAction"/>
            <separator/>
            <action id="sqs.delete.queue" class="software.aws.toolkits.jetbrains.services.sqs.actions.DeleteQueueAction"/>
        </group>

        <action class="software.aws.toolkits.jetbrains.core.credentials.ConfigureAwsConnectionAction" id="aws.settings.selector" icon="AwsIcons.Logos.AWS"/>

        <action class="software.aws.toolkits.jetbrains.services.lambda.actions.SyncServerlessApplicationAction" id="serverless.sync.infra"/>
        <action class="software.aws.toolkits.jetbrains.services.lambda.actions.SyncServerlessAppAction" id="serverless.sync.app"/>
        <action class="software.aws.toolkits.jetbrains.settings.ShowSettingsAction" id="aws.settings.show" icon="AllIcons.General.Settings"/>

        <group id="aws.toolkit.sono.id.actions">
            <action class="software.aws.toolkits.jetbrains.core.credentials.sono.SonoLogoutAction" id="aws.toolkit.caws.logout"/>
            <action class="software.aws.toolkits.jetbrains.services.caws.actions.OpenCawsProfileAction" id="aws.toolkit.caws.profile"/>
            <action class="software.aws.toolkits.jetbrains.ui.feedback.SubmitFeedbackInGateway" id="aws.toolkit.submit.caws.dev.env.feedback"/>
        </group>

        <group id="aws.toolkit.serverless.template">
            <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
            <add-to-group group-id="EditorPopupMenu" anchor="last"/>
            <add-to-group group-id="EditorTabPopupMenu" anchor="last"/>

            <separator/>
            <reference id="serverless.sync.infra"/>
            <separator/>
        </group>


        <group id="aws.toolkit.s3viewer.transferActions">
            <action class="software.aws.toolkits.jetbrains.services.s3.objectActions.DownloadObjectAction"/>
            <action class="software.aws.toolkits.jetbrains.services.s3.objectActions.UploadObjectAction"/>
        </group>

        <group id="aws.toolkit.s3viewer.versionActions">
            <action class="software.aws.toolkits.jetbrains.services.s3.objectActions.ViewObjectVersionAction"/>
        </group>

        <group id="aws.toolkit.s3viewer.mutateActions">
            <action class="software.aws.toolkits.jetbrains.services.s3.objectActions.NewFolderAction"/>
            <action class="software.aws.toolkits.jetbrains.services.s3.objectActions.RenameObjectAction" use-shortcut-of="RenameElement"/>
            <action class="software.aws.toolkits.jetbrains.services.s3.objectActions.DeleteObjectAction" use-shortcut-of="$Delete"/>
        </group>

        <group id="aws.toolkit.s3viewer.miscActions">
            <action class="software.aws.toolkits.jetbrains.services.s3.objectActions.RefreshTreeAction" use-shortcut-of="Refresh"/>
        </group>

        <group id="aws.toolkit.s3viewer.toolbar">
            <reference ref="aws.toolkit.s3viewer.transferActions"/>
            <separator/>
            <reference ref="aws.toolkit.s3viewer.versionActions"/>
            <separator/>
            <reference ref="aws.toolkit.s3viewer.mutateActions"/>
            <separator/>
            <reference ref="aws.toolkit.s3viewer.miscActions"/>
        </group>

        <group id="aws.toolkit.s3viewer.contextMenu">
            <reference ref="aws.toolkit.s3viewer.transferActions"/>
            <separator/>
            <reference ref="aws.toolkit.s3viewer.versionActions"/>
            <separator/>
            <group popup="true" id="aws.toolkit.s3viewer.contextMenu.copyGroup" icon="AllIcons.Actions.Copy">
                <action class="software.aws.toolkits.jetbrains.services.s3.objectActions.CopyPathAction"/>
                <action class="software.aws.toolkits.jetbrains.services.s3.objectActions.CopyUrlAction"/>
                <action class="software.aws.toolkits.jetbrains.services.s3.objectActions.CopyUriAction"/>
            </group>
            <separator/>
            <reference ref="aws.toolkit.s3viewer.mutateActions"/>
            <separator/>
            <reference ref="aws.toolkit.s3viewer.miscActions"/>
        </group>

        <group id="aws.toolkit.dynamoViewer.toolbar.primary">
        </group>

        <group id="aws.toolkit.dynamoViewer.toolbar.secondary">
            <group popup="true" id="aws.toolkit.dynamoViewer.toolbar.settings" icon="AllIcons.General.GearPlain">
                <action id="aws.toolkit.dynamoViewer.changeMaxResults"
                        class="software.aws.toolkits.jetbrains.services.dynamodb.editor.actions.ConfigureMaxResultsAction"/>
            </group>
        </group>

        <action id="aws.toolkit.connection.pinning.unpin"
                class="software.aws.toolkits.jetbrains.core.explorer.devToolsTab.nodes.actions.UnpinConnectionAction"/>

        <action id="aws.toolkit.cwQRootNode.installQ"
                class="software.aws.toolkits.jetbrains.core.explorer.actions.InstallAmazonQAction"/>

    </actions>

</idea-plugin>
