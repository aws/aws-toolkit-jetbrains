<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>UnreachableCode:RemoteResourceResolver.kt$DefaultRemoteResourceResolver$"Beginning file download from $url to $tmpFile"</ID>
    <ID>UnreachableCode:RemoteResourceResolver.kt$DefaultRemoteResourceResolver$deleteIfExists()</ID>
    <ID>UnreachableCode:RemoteResourceResolver.kt$DefaultRemoteResourceResolver$fetch(url, tmpFile)</ID>
    <ID>UnreachableCode:RemoteResourceResolver.kt$DefaultRemoteResourceResolver$return@mapNotNull null</ID>
    <ID>UnreachableCode:RemoteResourceResolver.kt$DefaultRemoteResourceResolver$tmpFile</ID>
    <ID>UnreachableCode:RemoteResourceResolver.kt$DefaultRemoteResourceResolver.Companion$return (Duration.between(file.lastModified().toInstant(), Instant.now()) > ttl).also { if (it) { LOG.debug { "TTL for file $file has expired." } } }</ID>
    <ID>UnreachableCode:RemoteResourceResolver.kt$DefaultRemoteResourceResolver.Companion$val ttl = resource.ttl ?: return false</ID>
    <ID>UnreachableCode:ToolkitClientManager.kt$ToolkitClientManager$if (tokenMethod == null) { LOG.warn { "Ignoring bearer provider parameter for ${sdkClass.qualifiedName} since it's not a supported client attribute" } } else { tokenMethod.invoke(this, tokenProvider) clientOverrideConfig.nullDefaultProfileFile() // TODO: why do we need this? clientOverrideConfig.putAdvancedOption(SdkAdvancedClientOption.SIGNER, BearerTokenSigner()) }</ID>
    <ID>UnreachableCode:ToolkitClientManager.kt$ToolkitClientManager$return builder .httpClient(sdkHttpClient()) .region(region) .apply { val clientOverrideConfig = ClientOverrideConfiguration.builder() if (credProvider != null) { credentialsProvider(credProvider) } if (tokenProvider != null) { val tokenMethod = builderMethod.returnType.methods.find { it.name == "tokenProvider" &amp;&amp; it.parameterCount == 1 &amp;&amp; it.parameters[0].type.name == "software.amazon.awssdk.auth.token.credentials.SdkTokenProvider" } if (tokenMethod == null) { LOG.warn { "Ignoring bearer provider parameter for ${sdkClass.qualifiedName} since it's not a supported client attribute" } } else { tokenMethod.invoke(this, tokenProvider) clientOverrideConfig.nullDefaultProfileFile() // TODO: why do we need this? clientOverrideConfig.putAdvancedOption(SdkAdvancedClientOption.SIGNER, BearerTokenSigner()) } } clientOverrideConfig.let { configuration -> configuration.putAdvancedOption(SdkAdvancedClientOption.USER_AGENT_PREFIX, userAgent) configuration.retryPolicy(RetryMode.STANDARD) } endpointOverride?.let { endpointOverride(URI.create(it)) } globalClientCustomizer(credProvider, tokenProvider, region.id(), this, clientOverrideConfig) clientCustomizer?.let { it.customize(credProvider, tokenProvider, region.id(), this, clientOverrideConfig) } // TODO: ban overrideConfiguration outside of here overrideConfiguration(clientOverrideConfig.build()) } .build() as T</ID>
    <ID>UnreachableCode:ToolkitClientManager.kt$ToolkitClientManager$val builder = builderMethod.invoke(null) as AwsDefaultClientBuilder&lt;*, *></ID>
    <ID>UnreachableCode:ToolkitClientManager.kt$ToolkitClientManager$val builderMethod = sdkClass.java.methods.find { it.name == "builder" &amp;&amp; Modifier.isStatic(it.modifiers) &amp;&amp; Modifier.isPublic(it.modifiers) } ?: throw IllegalArgumentException("Expected service interface to have a public static `builder()` method.")</ID>
    <ID>UnreachableCode:ToolkitClientManager.kt$ToolkitClientManager$val tokenMethod = builderMethod.returnType.methods.find { it.name == "tokenProvider" &amp;&amp; it.parameterCount == 1 &amp;&amp; it.parameters[0].type.name == "software.amazon.awssdk.auth.token.credentials.SdkTokenProvider" }</ID>
    <ID>UseCheckOrError:LambdaRuntime.kt$LambdaRuntime$throw IllegalStateException("LambdaRuntime has no runtime or override string")</ID>
    <ID>UseCheckOrError:ToolkitRegionProvider.kt$ToolkitRegionProvider$throw IllegalStateException("$serviceId in ${region.partitionId} lacks a partitionEndpoint")</ID>
    <ID>UseCheckOrError:ToolkitRegionProvider.kt$ToolkitRegionProvider$throw IllegalStateException("$serviceId is not global in ${region.partitionId}")</ID>
    <ID>UseCheckOrError:ToolkitRegionProvider.kt$ToolkitRegionProvider$throw IllegalStateException("Partition data is missing for ${region.partitionId}")</ID>
    <ID>UseCheckOrError:ToolkitRegionProvider.kt$ToolkitRegionProvider$throw IllegalStateException("Unknown service $serviceId in ${region.partitionId}")</ID>
  </CurrentIssues>
</SmellBaseline>
