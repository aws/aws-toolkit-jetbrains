<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>BannedImports:CawsCloneDialogComponent.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:CreateEcrRepoDialog.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:CreateIamServiceRoleDialog.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:CreationPanel.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:DeleteResourceDialog.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:DeployServerlessApplicationDialog.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:DynamicResourcesConfigurable.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:EnableDisableExecuteCommandWarning.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:ExperimentConfigurable.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:LambdaSettingsConfigurable.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:OpenShellInContainerDialog.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:PauseServiceAction.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:PullFromRepositoryAction.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:PushToRepositoryAction.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:ResumeServiceAction.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:RunCommandDialog.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:SamInitSelectionPanel.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:SchemaSelectionPanel.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:SdkSelectionPanel.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:SearchPanel.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:SonoLoginOverlay.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:TaskRoleNotFoundWarningDialog.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:ToolConfigurable.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:UploadFunctionContinueDialog.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:ValidatingPanel.kt$import com.intellij.ui.layout.panel</ID>
    <ID>BannedImports:ViewResourceDialog.kt$import com.intellij.ui.layout.panel</ID>
    <ID>CommentWrapping:Attributes.kt$NullAttribute$/*Dynamo always expects the NUL field to contain true */</ID>
    <ID>CommentWrapping:ConfigureMaxResultsAction.kt$ConfigureMaxResultsAction$/* popup */</ID>
    <ID>CommentWrapping:CredentialIdentifierSelector.kt$CredentialIdentifierSelector.Companion$/* Guarded by apply check */</ID>
    <ID>CommentWrapping:ProjectFileBrowseListener.kt$/* infer disposable from UI context */</ID>
    <ID>CommentWrapping:S3VirtualBucket.kt$S3VirtualBucket$/* Unit tests refuse to open this in an editor if this is true */</ID>
    <ID>CommentWrapping:SamInitSelectionPanel.kt$SamInitSelectionPanel$/* Only available in PyCharm! */</ID>
    <ID>CommentWrapping:SamInitSelectionPanel.kt$SamInitSelectionPanel$/* Used in Rider to refresh the validation */</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:CodeScanSessionConfig.kt$CodeScanSessionConfig$val (includedSourceFiles, payloadSize, totalLines, _) = includeDependencies()</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:CodeWhispererCodeReferenceManager.kt$CodeWhispererCodeReferenceManager$val (_, editor, _, caretPosition) = requestContext</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:CodeWhispererCodeReferenceManager.kt$CodeWhispererCodeReferenceManager.&lt;no name provided>$val (localEditor, highlighter, codeContent, referenceContent) = it</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:CodeWhispererPopupManager.kt$CodeWhispererPopupManager$val (_, _, recommendationContext, popup) = states</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:CodeWhispererTelemetryService.kt$CodeWhispererTelemetryService$val (payloadContext, serviceInvocationContext, codeScanJobId, totalIssues, reason) = codeScanEvent.codeScanResponseContext</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:CodeWhispererTelemetryService.kt$CodeWhispererTelemetryService$val (project, _, triggerTypeInfo, caretPosition) = requestContext</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:CodeWhispererTelemetryService.kt$CodeWhispererTelemetryService$val (requestId, detail, _, isDiscarded) = detailContext</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:JavaCodeScanSessionConfig.kt$JavaCodeScanSessionConfig$val (sourceFiles, srcPayloadSize, totalLines, buildPaths) = includeDependencies()</ID>
    <ID>ExpressionBodySyntax:CawsProjectListRenderer.kt$CawsProjectListRenderer.&lt;no name provided>$return myContext</ID>
    <ID>ExpressionBodySyntax:CodeWhispererTelemetryService.kt$CodeWhispererTelemetryService$return previousUserTriggerDecisionTimestamp?.let { Duration.between(it, Instant.now()).toMillis().toDouble() }</ID>
    <ID>Filename:AwsSettingsPanel.kt$software.aws.toolkits.jetbrains.core.credentials.AwsSettingsPanel.kt</ID>
    <ID>Filename:CawsSpaceProjectInfo.kt$software.aws.toolkits.jetbrains.services.caws.CawsSpaceProjectInfo.kt</ID>
    <ID>Filename:CognitoIdentityProvider.kt$software.aws.toolkits.jetbrains.services.telemetry.CognitoIdentityProvider.kt</ID>
    <ID>Filename:ShowLogsAroundAction.kt$software.aws.toolkits.jetbrains.services.cloudwatch.logs.actions.ShowLogsAroundAction.kt</ID>
    <ID>Filename:contexts.kt$software.aws.toolkits.jetbrains.core.coroutines.contexts.kt</ID>
    <ID>Filename:scopes.kt$software.aws.toolkits.jetbrains.core.coroutines.scopes.kt</ID>
    <ID>ImplicitDefaultLocale:CodeWhispererColorUtil.kt$CodeWhispererColorUtil$String.format("#%02x%02x%02x", this.red, this.green, this.blue)</ID>
    <ID>ImplicitDefaultLocale:DynamicResourcesUpdateManager.kt$DynamicResourceUpdateManager$message("dynamic_resources.editor.submitResourceUpdateRequest_text").toLowerCase()</ID>
    <ID>ImplicitDefaultLocale:DynamicResourcesUpdateManager.kt$DynamicResourceUpdateManager$message("general.delete").toLowerCase()</ID>
    <ID>ImplicitDefaultLocale:PathMapper.kt$PathMapper.Companion$localPath.toLowerCase()</ID>
    <ID>ImplicitDefaultLocale:ResourceSelector.kt$ResourceSelector$it.toString().toLowerCase()</ID>
    <ID>ImplicitDefaultLocale:SchemaCodeGenUtils.kt$SchemaCodeGenUtils.CodeGenPackageBuilder$segment.toLowerCase()</ID>
    <ID>LoopWithTooManyJumpStatements:CodeWhispererEditorManager.kt$CodeWhispererEditorManager$while</ID>
    <ID>LoopWithTooManyJumpStatements:DownloadObjectAction.kt$DownloadObjectAction$for</ID>
    <ID>NoNameShadowing:CreationPanel.kt$CreationPanel${ cpu = it }</ID>
    <ID>NoNameShadowing:CreationPanel.kt$CreationPanel${ memory = it }</ID>
    <ID>NoNameShadowing:CredentialIdentifierSelector.kt$CredentialIdentifierSelector${ comboBoxModel.add(it) }</ID>
    <ID>NoNameShadowing:DeployServerlessApplicationDialog.kt$DeployServerlessApplicationDialog${ it.repositoryName == ecrDialog.repoName }</ID>
    <ID>NoNameShadowing:DeployServerlessApplicationDialog.kt$DeployServerlessApplicationDialog${ s3BucketSelector.reload(forceFetch = true) s3BucketSelector.selectedItem = it }</ID>
    <ID>NoNameShadowing:RuntimeGroup.kt$RuntimeGroup.Companion${ it.id == id }</ID>
    <ID>RedundantSuspendModifier:ToolkitDockerAdapter.kt$ToolkitDockerAdapter$suspend</ID>
    <ID>TopLevelPropertyNaming:SqsUtils.kt$const val sqsPolicyStatementArray = "Statement"</ID>
    <ID>UnnecessaryApply:CreateIamServiceRoleDialog.kt$CreateIamServiceRoleDialog$apply { component.isEditable = false }</ID>
    <ID>UnnecessaryApply:CreationPanel.kt$CreationPanel$apply { component.toolTipText = message("apprunner.creation.panel.repository.url.tooltip") }</ID>
    <ID>UnnecessaryApply:ExperimentConfigurable.kt$ExperimentConfigurable$apply { component.icon = AllIcons.General.Warning }</ID>
    <ID>UnnecessaryApply:SendMessagePane.kt$SendMessagePane$apply { emptyText.text = message("sqs.send.message.body.empty.text") }</ID>
    <ID>UnnecessaryApply:SonoLoginOverlay.kt$SonoLoginOverlay$apply { applyToComponent { putClientProperty(DarculaButtonUI.DEFAULT_STYLE_KEY, true) } }</ID>
    <ID>UnnecessaryFilter:CodeWhispererPopupManager.kt$CodeWhispererPopupManager$filter { isValidRecommendation(it, userInput, typeahead) }</ID>
    <ID>UnnecessarySafeCall:NotificationUtils.kt$this.stackTrace?.joinToString("\n", prefix = "\n")</ID>
    <ID>UnreachableCode:AwsRegionProvider.kt$AwsRegionProvider$partitions.asSequence().associateBy { it.partition }.mapValues { PartitionData( it.value.partitionName, it.value.services, it.value.regions.asSequence().associate { region -> region.key to AwsRegion(region.key, region.value.description, it.key) } ) }</ID>
    <ID>UnreachableCode:AwsRegionProvider.kt$AwsRegionProvider$val partitions = inputStream?.use { PartitionParser.parse(it) }?.partitions ?: BundledResources.ENDPOINTS_FILE.use { PartitionParser.parse(BundledResources.ENDPOINTS_FILE) }?.partitions ?: throw Exception("Failed to retrieve partitions.")</ID>
    <ID>UnreachableCode:BearerTokenProvider.kt$InteractiveBearerTokenProvider$return RefreshResult.builder(token) .staleTime(token.expiresAt.minus(DEFAULT_STALE_DURATION)) .prefetchTime(token.expiresAt.minus(DEFAULT_PREFETCH_DURATION)) .build()</ID>
    <ID>UnreachableCode:BearerTokenProvider.kt$InteractiveBearerTokenProvider$val lastToken = lastToken.get() ?: error("Token refresh started before session initialized")</ID>
    <ID>UnreachableCode:BearerTokenProvider.kt$InteractiveBearerTokenProvider$val token = if (Duration.between(Instant.now(), lastToken.expiresAt) > Duration.ofMinutes(30)) { lastToken } else { accessTokenProvider.refreshToken(lastToken).also { this.lastToken.set(it) } }</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$ApplicationManager.getApplication().executeOnPooledThread { val userId = lazilyGetUserId() try { // TODO: show progress bar here so it doesn't look like we're stuck val url = AwsResourceCache.getInstance().getResource(CawsResources.cloneUrls(repository), cawsConnectionSettings).toCompletableFuture().get() val user = URI(url).userInfo.trim('@') if (!patExists(user)) { // TODO: prompt if this is OK before generating and storing // TODO: we should check that the current client's "identity" matches the desired user, but the REST client doesn't return // that information like the graphql endpoint does generateAndStorePat(client, user) } val destination = Paths.get(browseButton.text).toAbsolutePath() destination.createParentDirectories() val parentDirectory = destination.parent val parentDirectoryVfs = VfsUtil.findFile(parentDirectory, true) ?: throw RuntimeException("VFS could not find specified directory: $parentDirectory") val directoryName = destination.fileName.toString() runInEdt { GitCheckoutProvider.clone(project, Git.getInstance(), checkoutListener, parentDirectoryVfs, url, directoryName, parentDirectory.toString()) } // GitCheckoutProvider.clone is async, but assume any issues is with JB instead of us CodecatalystTelemetry.localClone(project = null, userId = userId, result = TelemetryResult.Succeeded) } catch (e: Exception) { CodecatalystTelemetry.localClone(project = null, userId = userId, result = TelemetryResult.Failed) throw e } }</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$CodecatalystTelemetry.localClone(project = null, userId = userId, result = TelemetryResult.Succeeded)</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$destination.createParentDirectories()</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$if (!patExists(user)) { // TODO: prompt if this is OK before generating and storing // TODO: we should check that the current client's "identity" matches the desired user, but the REST client doesn't return // that information like the graphql endpoint does generateAndStorePat(client, user) }</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$runInEdt { GitCheckoutProvider.clone(project, Git.getInstance(), checkoutListener, parentDirectoryVfs, url, directoryName, parentDirectory.toString()) }</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$val destination = Paths.get(browseButton.text).toAbsolutePath()</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$val directoryName = destination.fileName.toString()</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$val parentDirectory = destination.parent</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$val parentDirectoryVfs = VfsUtil.findFile(parentDirectory, true) ?: throw RuntimeException("VFS could not find specified directory: $parentDirectory")</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$val repository = repoList.selectedValue ?: throw RuntimeException("Repository was not selected")</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$val url = AwsResourceCache.getInstance().getResource(CawsResources.cloneUrls(repository), cawsConnectionSettings).toCompletableFuture().get()</ID>
    <ID>UnreachableCode:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$val user = URI(url).userInfo.trim('@')</ID>
    <ID>UnreachableCode:CawsParameterDescriptions.kt$return subscriptionTier == "FREE"</ID>
    <ID>UnreachableCode:CawsPatUtils.kt$set(credentialAttributes, Credentials(user, pat))</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$component.isOpaque = true</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$if (index == -1) { // if not a popup return c }</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$if (index == 0 || list.model.getElementAt(index - 0).space != value.space) { val separator = SeparatorWithText() separator.caption = value.space val wrapper = OpaquePanel(BorderLayout()) wrapper.add(separator, BorderLayout.CENTER) wrapper.background = list.background panel.add(wrapper, BorderLayout.NORTH) }</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$if (list.model.size == 0) { // probably still loading return loadingRenderer.getListCellRendererComponent(list, value, index, selected, hasFocus) }</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$panel.add(component, BorderLayout.CENTER)</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$panel.background = list.background</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$panel.isOpaque = true</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$return panel</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$val component = c as? SimpleColoredComponent ?: return c</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$val panel = object : CellRendererPanel() { init { layout = BorderLayout() } private val myContext: AccessibleContext = component.getAccessibleContext() override fun getAccessibleContext(): AccessibleContext { return myContext } override fun setBorder(border: Border?) { // we do not want to outer UI to add a border to that JPanel // see com.intellij.ide.ui.laf.darcula.ui.DarculaComboBoxUI.CustomComboPopup#customizeListRendererComponent component.border = border } }</ID>
    <ID>UnreachableCode:CawsProjectListRenderer.kt$CawsProjectListRenderer$value ?: return c</ID>
    <ID>UnreachableCode:CloudWatchActor.kt$CloudWatchLogsActor$TableUtil.scrollSelectionToVisible(table)</ID>
    <ID>UnreachableCode:CloudWatchActor.kt$CloudWatchLogsActor$setRowSelectionInterval(index, index)</ID>
    <ID>UnreachableCode:CloudWatchActor.kt$CloudWatchLogsActor$table</ID>
    <ID>UnreachableCode:CloudWatchActor.kt$CloudWatchLogsActor$val index = table.listTableModel.indexOf(item).takeIf { it > 0 } ?: return</ID>
    <ID>UnreachableCode:CloudWatchActor.kt$CloudWatchLogsActor$withContext(edtContext) { table.setRowSelectionInterval(index, index) TableUtil.scrollSelectionToVisible(table) }</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$codeScanNode.userObject !is CodeWhispererCodeScanIssue</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$if (codeScanIssue.isInvalid) return false</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$return false</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$return status</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$runInEdt { val editor = FileEditorManager.getInstance(project).openTextEditor( OpenFileDescriptor(project, codeScanIssue.file, startOffset), true ) if (editor == null) { LOG.error { "Cannot fetch editor for the file ${codeScanIssue.file.path}" } status = false return@runInEdt } // If the codeScanIssue is still valid and rangehighlighter was not added previously for some reason, // try adding again. if (!codeScanIssue.isInvalid &amp;&amp; codeScanIssue.rangeHighlighter == null) { codeScanIssue.rangeHighlighter = codeScanIssue.addRangeHighlighter(editor.markupModel) } }</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$synchronized(codeScanNode) { if (codeScanNode.userObject !is CodeWhispererCodeScanIssue) return false val codeScanIssue = codeScanNode.userObject as CodeWhispererCodeScanIssue val textRange = codeScanIssue.textRange ?: return false val startOffset = textRange.startOffset if (codeScanIssue.isInvalid) return false runInEdt { val editor = FileEditorManager.getInstance(project).openTextEditor( OpenFileDescriptor(project, codeScanIssue.file, startOffset), true ) if (editor == null) { LOG.error { "Cannot fetch editor for the file ${codeScanIssue.file.path}" } status = false return@runInEdt } // If the codeScanIssue is still valid and rangehighlighter was not added previously for some reason, // try adding again. if (!codeScanIssue.isInvalid &amp;&amp; codeScanIssue.rangeHighlighter == null) { codeScanIssue.rangeHighlighter = codeScanIssue.addRangeHighlighter(editor.markupModel) } } }</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$val codeScanIssue = codeScanNode.userObject as CodeWhispererCodeScanIssue</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$val codeScanNode = (e.source as Tree).selectionPath?.lastPathComponent as? DefaultMutableTreeNode ?: return false</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$val startOffset = textRange.startOffset</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$val textRange = codeScanIssue.textRange ?: return false</ID>
    <ID>UnreachableCode:CodeWhispererCodeScanTreeMouseListener.kt$CodeWhispererCodeScanTreeMouseListener$var status = true</ID>
    <ID>UnreachableCode:CodeWhispererInvocationStatus.kt$CodeWhispererInvocationStatus$return timeCanShowCodeWhisperer.isBefore(Instant.now())</ID>
    <ID>UnreachableCode:CodeWhispererInvocationStatus.kt$CodeWhispererInvocationStatus$val timeCanShowCodeWhisperer = timeAtLastInvocationStart?.plusMillis(CodeWhispererConstants.INVOCATION_INTERVAL) ?: return true</ID>
    <ID>UnreachableCode:CodeWhispererLicenseInfoManager.kt$CodeWhispererLicenseInfoManager$getOrDefault(code, "")</ID>
    <ID>UnreachableCode:CreateFunctionDialog.kt$CreateFunctionDialog$createLambdaWorkflowForZip( project = project, functionDetails = functionDetails, codeDetails = codeDetails, buildDir = lambdaBuilder.getBuildDirectory(module), buildEnvVars = lambdaBuilder.additionalBuildEnvironmentVariables(project, module, samOptions), codeStorageLocation = view.codeStorage.codeLocation(), samOptions = samOptions )</ID>
    <ID>UnreachableCode:CreateFunctionDialog.kt$CreateFunctionDialog$val codeDetails = ZipBasedCode( baseDir = lambdaBuilder.handlerBaseDirectory(module, element), handler = handler, runtime = runtime )</ID>
    <ID>UnreachableCode:CreateFunctionDialog.kt$CreateFunctionDialog$val element = findPsiElementsForHandler(project, runtime, handler).first()</ID>
    <ID>UnreachableCode:CreateFunctionDialog.kt$CreateFunctionDialog$val functionDetails = viewToFunctionDetails(runtime, handler)</ID>
    <ID>UnreachableCode:CreateFunctionDialog.kt$CreateFunctionDialog$val handler = view.configSettings.handlerPanel.handler.text</ID>
    <ID>UnreachableCode:CreateFunctionDialog.kt$CreateFunctionDialog$val lambdaBuilder = runtime.runtimeGroup?.let { LambdaBuilder.getInstanceOrNull(it) } ?: throw IllegalStateException("LambdaBuilder for $runtime not found")</ID>
    <ID>UnreachableCode:CreateFunctionDialog.kt$CreateFunctionDialog$val module = ModuleUtil.findModuleForPsiElement(element) ?: throw IllegalStateException("Failed to locate module for $element")</ID>
    <ID>UnreachableCode:CreateFunctionDialog.kt$CreateFunctionDialog$val runtime = view.configSettings.runtime.selected() ?: throw IllegalStateException("Runtime is missing when package type is Zip")</ID>
    <ID>UnreachableCode:CreateFunctionPanel.kt$CreateFunctionPanel$if (!FUNCTION_NAME_PATTERN.matches(nameValue)) { return name.validationInfo(message("lambda.upload_validation.function_name_invalid")) }</ID>
    <ID>UnreachableCode:CreateFunctionPanel.kt$CreateFunctionPanel$if (nameValue.length > MAX_FUNCTION_NAME_LENGTH) { return name.validationInfo(message("lambda.upload_validation.function_name_too_long", 64)) }</ID>
    <ID>UnreachableCode:CreateFunctionPanel.kt$CreateFunctionPanel$return configSettings.validatePanel() ?: codeStorage.validatePanel()</ID>
    <ID>UnreachableCode:CreateFunctionPanel.kt$CreateFunctionPanel$val nameValue = name.blankAsNull() ?: return name.validationInfo(message("lambda.upload_validation.function_name"))</ID>
    <ID>UnreachableCode:CredentialManager.kt$CredentialManager.AwsCredentialProviderProxy$return partitionCache.computeIfAbsent(region.partitionId) { val providerFactory = factoryMapping()[identifier.factoryId] ?: throw CredentialProviderNotFoundException("No provider factory found with ID ${identifier.factoryId}") try { providerFactory.createAwsCredentialProvider(identifier, region) } catch (e: Exception) { throw CredentialProviderNotFoundException("Failed to create underlying AwsCredentialProvider", e) } }</ID>
    <ID>UnreachableCode:CredentialManager.kt$CredentialManager.AwsCredentialProviderProxy$try { providerFactory.createAwsCredentialProvider(identifier, region) } catch (e: Exception) { throw CredentialProviderNotFoundException("Failed to create underlying AwsCredentialProvider", e) }</ID>
    <ID>UnreachableCode:CredentialManager.kt$CredentialManager.AwsCredentialProviderProxy$val identifier = providerIds[providerId] ?: throw CredentialProviderNotFoundException("Provider ID $providerId was removed, can't resolve credentials")</ID>
    <ID>UnreachableCode:CredentialManager.kt$CredentialManager.AwsCredentialProviderProxy$val partitionCache = awsCredentialProviderCache.computeIfAbsent(providerId) { ConcurrentHashMap() }</ID>
    <ID>UnreachableCode:CredentialManager.kt$CredentialManager.AwsCredentialProviderProxy$val providerFactory = factoryMapping()[identifier.factoryId] ?: throw CredentialProviderNotFoundException("No provider factory found with ID ${identifier.factoryId}")</ID>
    <ID>UnreachableCode:DefaultToolManager.kt$DefaultToolManager$if (markerVersion.contains("/") || markerVersion.contains("\\")) { return null }</ID>
    <ID>UnreachableCode:DefaultToolManager.kt$DefaultToolManager$readText()</ID>
    <ID>UnreachableCode:DefaultToolManager.kt$DefaultToolManager$return markerVersion</ID>
    <ID>UnreachableCode:DefaultToolManager.kt$DefaultToolManager$return type.toTool(installLocation)</ID>
    <ID>UnreachableCode:DefaultToolManager.kt$DefaultToolManager$val installLocation = managedToolInstallDir(type.id, markerVersion).takeIf { it.exists() } ?: return null</ID>
    <ID>UnreachableCode:DefaultToolManager.kt$DefaultToolManager$val markerFile = managedToolMarkerFile(type.id).takeIf { it.exists() } ?: return null</ID>
    <ID>UnreachableCode:DefaultToolManager.kt$DefaultToolManager$val markerVersion = managedToolLock.withLock { markerFile.readText() }</ID>
    <ID>UnreachableCode:DeployAction.kt$DeployAction$LOG.error { "Unable to find log stream for deployment $logStream" }</ID>
    <ID>UnreachableCode:DeployAction.kt$DeployAction$notifyError( project = project, content = message("apprunner.action.deploy.unableToFindLogStream", logStream) )</ID>
    <ID>UnreachableCode:DeployAction.kt$DeployAction$repeat(15) { _ -> if (runCatching { cloudwatchClient.checkIfLogStreamExists(logGroup, logStream) }.getOrNull() == true) { LOG.info { "Found log stream for deployment $logStream" } logWindow.showLogStream(logGroup, logStream, streamLogs = true) return } delay(1000) }</ID>
    <ID>UnreachableCode:DeployAction.kt$DeployAction$val logStream = "deployment/${deployment.operationId()}"</ID>
    <ID>UnreachableCode:DeployAction.kt$DeployAction$val logWindow = CloudWatchLogWindow.getInstance(project)</ID>
    <ID>UnreachableCode:DiskCache.kt$DiskCache$return loadAccessToken(inputStream)</ID>
    <ID>UnreachableCode:DiskCache.kt$DiskCache$return loadClientRegistration(inputStream)</ID>
    <ID>UnreachableCode:DiskCache.kt$DiskCache$val inputStream = cacheFile.tryInputStreamIfExists() ?: return null</ID>
    <ID>UnreachableCode:DiskCache.kt$DiskCache$val inputStream = clientRegistrationCache(cacheKey).tryInputStreamIfExists() ?: clientRegistrationCacheBackwardCompatible(cacheKey).tryInputStreamIfExists() ?: return null</ID>
    <ID>UnreachableCode:DiskCache.kt$DiskCache$val inputStream = clientRegistrationCache(ssoRegion).tryInputStreamIfExists() ?: return null</ID>
    <ID>UnreachableCode:DownloadObjectAction.kt$DownloadObjectAction$DownloadInfo(sourceBucket, it, selectedLocation.resolve(it.fileName()))</ID>
    <ID>UnreachableCode:DownloadObjectAction.kt$DownloadObjectAction$downloadAll(project, finalDownloads)</ID>
    <ID>UnreachableCode:DownloadObjectAction.kt$DownloadObjectAction$val destinationFile = if (selectedLocation.isDirectory()) { selectedLocation.resolve(file.fileName()) } else { selectedLocation }</ID>
    <ID>UnreachableCode:DownloadObjectAction.kt$DownloadObjectAction$val downloads = files.map { DownloadInfo(sourceBucket, it, selectedLocation.resolve(it.fileName())) }</ID>
    <ID>UnreachableCode:DownloadObjectAction.kt$DownloadObjectAction$val downloads = listOf(DownloadInfo(sourceBucket, file, destinationFile))</ID>
    <ID>UnreachableCode:DownloadObjectAction.kt$DownloadObjectAction$val finalDownloads = checkForConflicts(project, selectedLocation, downloads)</ID>
    <ID>UnreachableCode:DownloadObjectAction.kt$DownloadObjectAction$val finalDownloads = if (selectedLocation.isDirectory()) { checkForConflicts(project, destinationFile, downloads) } else { // If user has requested a single file as their destination, presume they want to overwrite it downloads }</ID>
    <ID>UnreachableCode:DownloadObjectAction.kt$DownloadObjectAction$val selectedLocation = getDownloadLocation(project = project, foldersOnly = false) ?: return</ID>
    <ID>UnreachableCode:DownloadObjectAction.kt$DownloadObjectAction$val selectedLocation = getDownloadLocation(project, foldersOnly = true) ?: return</ID>
    <ID>UnreachableCode:DynamicResourceSupportedTypes.kt$DynamicResourceSupportedTypes$documentation</ID>
    <ID>UnreachableCode:DynamicResourceSupportedTypes.kt$DynamicResourceSupportedTypes$filterValues { it.operations.contains(PermittedOperation.LIST) }</ID>
    <ID>UnreachableCode:DynamicResourceSupportedTypes.kt$DynamicResourceSupportedTypes$keys</ID>
    <ID>UnreachableCode:DynamicResourceSupportedTypes.kt$DynamicResourceSupportedTypes$supportedTypes[resourceType]</ID>
    <ID>UnreachableCode:DynamicResourceSupportedTypes.kt$DynamicResourceSupportedTypes$toList()</ID>
    <ID>UnreachableCode:DynamicTableView.kt$DynamicTableView$field to model.getValueAt(row, col)</ID>
    <ID>UnreachableCode:DynamicTableView.kt$DynamicTableView$return (0 until model.columnCount).map { col -> val field = fields.find { field -> field.readableName == model.getColumnName(col) } ?: return null field to model.getValueAt(row, col) }.toMap()</ID>
    <ID>UnreachableCode:DynamicTableView.kt$DynamicTableView$val row = table.selectedRows?.takeIf { it.size == 1 }?.firstOrNull() ?: return null</ID>
    <ID>UnreachableCode:EcsExecUtils.kt$EcsExecUtils$return iamClient.getInstanceProfile { it.instanceProfileName(instanceProfileName) }.instanceProfile().roles().first().arn() ?: null</ID>
    <ID>UnreachableCode:EcsExecUtils.kt$EcsExecUtils$val instanceProfileArn = project.awsClient&lt;Ec2Client>().describeInstances { it.instanceIds(ec2InstanceId) }.reservations().first().instances().first().iamInstanceProfile().arn() ?: return null</ID>
    <ID>UnreachableCode:EcsExecUtils.kt$EcsExecUtils$val instanceProfileName = instanceProfileArn.substringAfter(":instance-profile/")</ID>
    <ID>UnreachableCode:EditAttributesAction.kt$EditAttributesAction.&lt;no name provided>$EditAttributesDialog(selected.nodeProject, client, queue, attributes)</ID>
    <ID>UnreachableCode:EditAttributesAction.kt$EditAttributesAction.&lt;no name provided>$show()</ID>
    <ID>UnreachableCode:ExecutableDetector.kt$ExecutableDetector$pathEntries.forEach { pathEntry -> val f = File(pathEntry, executableName) if (f.exists()) { return f.path } }</ID>
    <ID>UnreachableCode:ExecutableDetector.kt$ExecutableDetector$return null</ID>
    <ID>UnreachableCode:ExecutableDetector.kt$ExecutableDetector$val pathEntries = StringUtil.split(pathEnvVar, File.pathSeparator)</ID>
    <ID>UnreachableCode:ExecutableDetector.kt$ExecutableDetector$val pathEnvVar = System.getenv(PATH_ENV) ?: return null</ID>
    <ID>UnreachableCode:ExplorerCredentialsHelpPanel.kt$&lt;no name provided>$action()</ID>
    <ID>UnreachableCode:ExplorerCredentialsHelpPanel.kt$&lt;no name provided>$return true</ID>
    <ID>UnreachableCode:ExplorerCredentialsHelpPanel.kt$&lt;no name provided>$val action = list.selectedValue?.action ?: return false</ID>
    <ID>UnreachableCode:GetStartedNode.kt$GetStartedNode$VfsUtil.findFile(path, true)?.let { readme -> readme.putUserData(TextEditorWithPreview.DEFAULT_LAYOUT_FOR_FILE, TextEditorWithPreview.Layout.SHOW_PREVIEW) val fileEditorManager = FileEditorManager.getInstance(project) ApplicationManager.getApplication().invokeLater { val editor = fileEditorManager.openTextEditor(OpenFileDescriptor(project, readme), true) if (editor == null) { LOG.warn { "Failed to open WelcomeToCodeWhisperer.md" } } else { CodeWhispererExplorerActionManager.getInstance().setHasShownHowToUseCodeWhisperer(true) } } }</ID>
    <ID>UnreachableCode:GetStartedNode.kt$GetStartedNode$val path = plugin.pluginPath.resolve("assets").resolve("WelcomeToCodeWhisperer.md") ?: return</ID>
    <ID>UnreachableCode:LambdaConfigPanel.kt$LambdaConfigPanel$handlerPanel.validateHandler(handlerMustExist = !isUpdate)?.let { return it }</ID>
    <ID>UnreachableCode:LambdaExecutionUtils.kt$handler()</ID>
    <ID>UnreachableCode:LambdaExecutionUtils.kt$return ResolvedFunction(handler, runtime, architecture)</ID>
    <ID>UnreachableCode:LambdaExecutionUtils.kt$val architecture = function.architectures().validateSupportedArchitectures()</ID>
    <ID>UnreachableCode:LambdaExecutionUtils.kt$val function = SamTemplateUtils.findFunctionsFromTemplate(project, templateFile) .find { it.logicalName == functionName } ?: throw RuntimeConfigurationError( message( "lambda.run_configuration.sam.no_such_function", logicalName, templateFile.path ) )</ID>
    <ID>UnreachableCode:LambdaExecutionUtils.kt$val handler = tryOrNull { function.handler() } ?: throw RuntimeConfigurationError(message("lambda.run_configuration.no_handler_specified"))</ID>
    <ID>UnreachableCode:LambdaExecutionUtils.kt$val runtime = runtimeString.validateSupportedRuntime()</ID>
    <ID>UnreachableCode:LambdaExecutionUtils.kt$val runtimeString = try { function.runtime() } catch (e: Exception) { throw RuntimeConfigurationError(message("cloudformation.missing_property", "Runtime", logicalName)) }</ID>
    <ID>UnreachableCode:LogGroupTable.kt$LogGroupTable$return getValueAt(row, 0) as? String</ID>
    <ID>UnreachableCode:LogGroupTable.kt$LogGroupTable$table.getValueAt(row, 0) as? String</ID>
    <ID>UnreachableCode:LogGroupTable.kt$LogGroupTable$val row = groupTable.selectedRow.takeIf { it >= 0 } ?: return@ExportActionGroup null</ID>
    <ID>UnreachableCode:LogGroupTable.kt$LogGroupTable$val row = selectedRow.takeIf { it >= 0 } ?: return null</ID>
    <ID>UnreachableCode:PythonLambdaHandlerResolver.kt$PythonLambdaHandlerResolver$if (validateHandlerPath(pyModule, moduleFolders, parentFolders)) { return arrayOf(lambdaFunctionCandidate) }</ID>
    <ID>UnreachableCode:PythonLambdaHandlerResolver.kt$PythonLambdaHandlerResolver$val lambdaFunctionCandidate = pyModule.findTopLevelFunction(functionName) ?: return@forEach</ID>
    <ID>UnreachableCode:QueryEditorDialog.kt$QueryEditorDialog$CloudWatchLogWindow.getInstance(project).showQueryResults(queryDetails, queryId, fieldList)</ID>
    <ID>UnreachableCode:QueryEditorDialog.kt$QueryEditorDialog$val queryId = startQueryAsync(queryDetails).await()</ID>
    <ID>UnreachableCode:QueryResultsTable.kt$QueryResultsTable.&lt;no name provided>$coroutineScope.launch { CloudWatchLogWindow.getInstance(project).showDetailedEvent(client, identifier) }</ID>
    <ID>UnreachableCode:QueryResultsTable.kt$QueryResultsTable.&lt;no name provided>$return true</ID>
    <ID>UnreachableCode:QueryResultsTable.kt$QueryResultsTable.&lt;no name provided>$showDetailedEvent(client, identifier)</ID>
    <ID>UnreachableCode:QueryResultsTable.kt$QueryResultsTable.&lt;no name provided>$val identifier = resultsTable.selectedObject?.identifier() ?: return false</ID>
    <ID>UnreachableCode:ResizingColumnRenderer.kt$ResizingColumnRenderer$component.border = null</ID>
    <ID>UnreachableCode:ResizingColumnRenderer.kt$ResizingColumnRenderer$component.text = getText(value)</ID>
    <ID>UnreachableCode:ResizingColumnRenderer.kt$ResizingColumnRenderer$if (component.preferredSize.width > table.columnModel.getColumn(column).preferredWidth) { // add 3 pixels of padding. No padding makes it go into ... mode cutting off the end table.columnModel.getColumn(column).preferredWidth = component.preferredSize.width + 3 table.columnModel.getColumn(column).maxWidth = component.preferredSize.width + 3 }</ID>
    <ID>UnreachableCode:ResizingColumnRenderer.kt$ResizingColumnRenderer$if (isSelected) { // this border has an outside and inside border, take only the outside border wrapper.border = (component.border as? CompoundBorder)?.outsideBorder }</ID>
    <ID>UnreachableCode:ResizingColumnRenderer.kt$ResizingColumnRenderer$return wrapper</ID>
    <ID>UnreachableCode:ResizingColumnRenderer.kt$ResizingColumnRenderer$val component = defaultComponent as? JLabel ?: return defaultComponent</ID>
    <ID>UnreachableCode:ResizingColumnRenderer.kt$ResizingColumnRenderer$wrapper.add(component, BorderLayout.NORTH)</ID>
    <ID>UnreachableCode:ResizingColumnRenderer.kt$ResizingColumnRenderer$wrapper.background = component.background</ID>
    <ID>UnreachableCode:S3ColumnInfo.kt$S3Column$return getValue(userObject)</ID>
    <ID>UnreachableCode:S3ColumnInfo.kt$S3Column$val userObject = (item as DefaultMutableTreeNode).userObject ?: return ""</ID>
    <ID>UnreachableCode:S3TreeTable.kt$S3TreeTable.&lt;no name provided>$return handleLoadingMore(row)</ID>
    <ID>UnreachableCode:S3TreeTable.kt$S3TreeTable.&lt;no name provided>$return handleOpeningFile(row, isDoubleClick = true)</ID>
    <ID>UnreachableCode:S3TreeTable.kt$S3TreeTable.&lt;no name provided>$uploadObjects(project, this@S3TreeTable, data.map { it.toPath() }, node)</ID>
    <ID>UnreachableCode:S3TreeTable.kt$S3TreeTable.&lt;no name provided>$val row = rowAtPoint(e.point).takeIf { it >= 0 } ?: return false</ID>
    <ID>UnreachableCode:SamCommonUtils.kt$return samExecutable.getCommandLine()</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$SamProjectTemplate.supportedTemplates().asSequence() .filter { when (packagingType) { PackageType.ZIP -> it.supportedZipRuntimes().contains(selectedRuntime) else -> it.supportedImageRuntimes().contains(selectedRuntime) } } .forEach { templateComboBox.addItem(it) }</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$contains(selectedRuntime)</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$if (samVersion &lt; minArchitectureSamVersion) { return ValidationInfo(message("sam.executable.minimum_too_low_architecture", selectedArchitecture, minArchitectureSamVersion), runtimeComboBox) }</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$if (samVersion &lt; minRuntimeSamVersion) { return ValidationInfo(message("sam.executable.minimum_too_low_runtime", selectedRuntime, minRuntimeSamVersion), runtimeComboBox) }</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$if (selectedTemplate != null) { templateComboBox.selectedItem = selectedTemplate }</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$return SamNewProjectSettings(template = samProjectTemplate, runtime = lambdaRuntime, architecture = lambdaArchitecture, packagingType = packageType())</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$return wizardFragments.keys .filter { it.isApplicable(samProjectTemplate) } .mapNotNull { it.validateFragment() } .firstOrNull()</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$val lambdaArchitecture = architectures.selected ?: throw RuntimeException("No architecture is supported for this runtime: $lambdaRuntime")</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$val lambdaRuntime = runtimes.selected ?: throw RuntimeException("No Runtime is supported in this Platform.")</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$val minArchitectureSamVersion = selectedArchitecture.minSamVersion()</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$val minRuntimeSamVersion = selectedRuntime.minSamInitVersion()</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$val packagingType = packageType()</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$val samProjectTemplate = templateComboBox.selectedItem as? SamProjectTemplate ?: return templateComboBox.validationInfo(message("sam.init.error.no.template.selected"))</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$val samProjectTemplate = templateComboBox.selectedItem as? SamProjectTemplate ?: throw RuntimeException("No SAM template is supported for this runtime: $lambdaRuntime")</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$val selectedArchitecture = architectures.selected ?: return templateComboBox.validationInfo(message("sam.init.error.no.architecture.selected"))</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$val selectedRuntime = runtimes.selected ?: return</ID>
    <ID>UnreachableCode:SamInitSelectionPanel.kt$SamInitSelectionPanel$val selectedRuntime = runtimes.selected ?: return templateComboBox.validationInfo(message("sam.init.error.no.runtime.selected"))</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$globalVars + vars</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$it.toString() == type</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$return PackageType.knownValues().firstOrNull { it.toString() == type } ?: throw IllegalStateException(message("cloudformation.invalid_property", "PackageType", type))</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$return findFunctionsFromTemplate(project, virtualFile)</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$return findZipFunctionsFromTemplate(project, virtualFile)</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$val function = requiredAt("/Resources").get(logicalId) ?: throw IllegalArgumentException("No resource with the logical ID $logicalId")</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$val globalVars = runCatching { MAPPER.convertValue&lt;Map&lt;String, String>?>(globals) ?: emptyMap() }.getOrDefault(emptyMap())</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$val globals = at("/Globals/Function/Environment/Variables")</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$val type = this.at("/Properties/PackageType")?.textValue() ?: return PackageType.ZIP</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$val variables = function.at("/Properties/Environment/Variables")</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$val vars = runCatching { MAPPER.convertValue&lt;Map&lt;String, String>?>(variables) ?: emptyMap() }.getOrDefault(emptyMap())</ID>
    <ID>UnreachableCode:SamTemplateUtils.kt$SamTemplateUtils$val virtualFile = file.readFileIntoMemory() ?: return emptyList()</ID>
    <ID>UnreachableCode:ShowLogsAroundAction.kt$ShowLogsAround$val selectedObject = treeTable.listTableModel.getItem(selectedRow) ?: return@runBlocking</ID>
    <ID>UnreachableCode:ShowLogsAroundAction.kt$ShowLogsAround$window.showLogStream(logGroup, logStream, selectedObject, duration)</ID>
    <ID>UnreachableCode:SsoAccessTokenProvider.kt$SsoAccessTokenProvider$return Authorization( authorizationResponse.deviceCode(), authorizationResponse.userCode(), authorizationResponse.verificationUri(), authorizationResponse.verificationUriComplete(), Instant.now(clock).plusSeconds(authorizationResponse.expiresIn().toLong()), authorizationResponse.interval()?.toLong() ?: DEFAULT_INTERVAL_SECS, authorizationCreationTime )</ID>
    <ID>UnreachableCode:SsoCredentialProvider.kt$SsoCredentialProvider$return RefreshResult.builder(ssoCredentials) .staleTime(expirationTime.minus(Duration.ofMinutes(1))) .prefetchTime(expirationTime.minus(Duration.ofMinutes(5))) .build()</ID>
    <ID>UnreachableCode:SsoCredentialProvider.kt$SsoCredentialProvider$val awsCredentials = AwsSessionCredentials.create( roleCredentials.roleCredentials().accessKeyId(), roleCredentials.roleCredentials().secretAccessKey(), roleCredentials.roleCredentials().sessionToken() )</ID>
    <ID>UnreachableCode:SsoCredentialProvider.kt$SsoCredentialProvider$val expirationTime = Instant.ofEpochMilli(roleCredentials.roleCredentials().expiration())</ID>
    <ID>UnreachableCode:SsoCredentialProvider.kt$SsoCredentialProvider$val ssoCredentials = SsoCredentialsHolder(awsCredentials, expirationTime)</ID>
    <ID>UnreachableCode:TemplateSettings.kt$TemplateSettings$functionModels.selectedItem = function</ID>
    <ID>UnreachableCode:TemplateSettings.kt$TemplateSettings$val function = functionModels.find { it.logicalName == logicalFunctionName } ?: return</ID>
    <ID>UnreachableCode:UiUtils.kt$SpeedSearchHighlighter$drawSearchMatch(graphics, beginningRect.x.toFloat(), endingRect.x.toFloat(), beginningRect.y.toFloat(), beginningRect.height)</ID>
    <ID>UnreachableCode:UiUtils.kt$SpeedSearchHighlighter$val beginningRect = component.modelToView(startingPoint)</ID>
    <ID>UnreachableCode:UiUtils.kt$SpeedSearchHighlighter$val endingRect = component.modelToView(endingPoint)</ID>
    <ID>UnreachableCode:UiUtils.kt$SpeedSearchHighlighter$val graphics = g as? Graphics2D ?: return</ID>
    <ID>UnreachableCode:UiUtils.kt$fragments.forEach { highlighter?.addHighlight(it.startOffset, it.endOffset, SpeedSearchHighlighter()) }</ID>
    <ID>UnreachableCode:UiUtils.kt$val fragments = speedSearch.matchingFragments(text)?.iterator() ?: return</ID>
    <ID>UnreachableCode:UiUtils.kt$val speedSearch = SpeedSearchSupply.getSupply(speedSearchEnabledComponent) ?: return</ID>
    <ID>UnsafeCallOnNullableType:CachingAsyncEvaluator.kt$CachingAsyncEvaluator$promise.blockingGet(blockingTime, blockingUnit)!!</ID>
    <ID>UnsafeCallOnNullableType:CreateFunctionDialog.kt$CreateFunctionDialog$view.configSettings.iamRole.selected()!!</ID>
    <ID>UnsafeCallOnNullableType:CredentialIdentifierSelector.kt$CredentialIdentifierSelector.Companion$it!!</ID>
    <ID>UnsafeCallOnNullableType:DockerfileParser.kt$DockerfileParser$PsiManager.getInstance(project).findFile(virtualFile)!!</ID>
    <ID>UnsafeCallOnNullableType:HandlerCompletionProvider.kt$HandlerCompletionProvider$handlerCompletion!!</ID>
    <ID>UnsafeCallOnNullableType:LocalLambdaRunConfiguration.kt$LocalLambdaRunConfiguration$promise.blockingGet(0)!!</ID>
    <ID>UnsafeCallOnNullableType:PullFromRepositoryAction.kt$PullFromRepositoryDialog$imageSelector.selected()!!</ID>
    <ID>UnsafeCallOnNullableType:PullFromRepositoryAction.kt$PullFromRepositoryDialog$repoSelector.selected()!!</ID>
    <ID>UnsafeCallOnNullableType:SchemaResourceSelector.kt$SchemaResourceSelector$awsConnection!!</ID>
    <ID>UnsafeCallOnNullableType:UpdateFunctionConfigDialog.kt$UpdateFunctionConfigDialog$view.configSettings.iamRole.selected()!!</ID>
    <ID>UnsafeCast:AsyncComboBox.kt$AsyncComboBox.&lt;no name provided>$super.getListCellRendererComponent(list, value, index, selected, hasFocus) as SimpleListCellRenderer&lt;*></ID>
    <ID>UnsafeCast:CawsProjectListRenderer.kt$CawsProjectListRenderer$c as? SimpleColoredComponent</ID>
    <ID>UnsafeCast:CodeWhispererCodeScanManager.kt$CodeWhispererCodeScanManager$e as? CodeWhispererException</ID>
    <ID>UnsafeCast:CodeWhispererCodeScanSession.kt$CodeWhispererCodeScanSession$e as? CodeWhispererException</ID>
    <ID>UnsafeCast:SqsWindow.kt$SqsWindow$sqsViewContent.component as SqsWindowUi</ID>
    <ID>UnusedPrivateProperty:CawsCloneDialogComponent.kt$CawsCloneDialogComponent$private val modalityState: ModalityState</ID>
    <ID>UseCheckOrError:AwsConnectionExtension.kt$AwsConnectionRunConfigurationExtension$throw IllegalStateException(message("aws.notification.credentials_missing"))</ID>
    <ID>UseCheckOrError:AwsConnectionExtension.kt$AwsConnectionRunConfigurationExtension$throw IllegalStateException(message("configure.validate.no_region_specified"))</ID>
    <ID>UseCheckOrError:AwsConnectionManager.kt$throw IllegalStateException("Bug: Attempting to retrieve connection settings with invalid connection state")</ID>
    <ID>UseCheckOrError:AwsConnectionManager.kt$throw IllegalStateException("Connection settings are not configured")</ID>
    <ID>UseCheckOrError:AwsConsoleUrlFactory.kt$AwsConsoleUrlFactory$throw IllegalStateException("Partition '${region.partitionId}' is not supported")</ID>
    <ID>UseCheckOrError:AwsRegionProvider.kt$AwsRegionProvider$throw IllegalStateException("Region provider data is missing default data")</ID>
    <ID>UseCheckOrError:AwsResourceCache.kt$ExecutableBackedCacheResource$throw IllegalStateException((it as ExecutableInstance.BadExecutable).validationError)</ID>
    <ID>UseCheckOrError:CawsParameterDescriptions.kt$throw IllegalStateException("Failed to locate parameterDescriptions.json")</ID>
    <ID>UseCheckOrError:CliBasedStep.kt$CliBasedStep$throw IllegalStateException(message("general.execution.cli_error", exitCode))</ID>
    <ID>UseCheckOrError:CloudWatchActor.kt$CloudWatchLogsActor$throw IllegalStateException("Table does not support loadInitial")</ID>
    <ID>UseCheckOrError:CloudWatchActor.kt$CloudWatchLogsActor$throw IllegalStateException("Table does not support loadInitialFilter")</ID>
    <ID>UseCheckOrError:CloudWatchActor.kt$CloudWatchLogsActor$throw IllegalStateException("Table does not support loadInitialRange")</ID>
    <ID>UseCheckOrError:CloudWatchLogGroup.kt$CloudWatchLogGroup$throw IllegalStateException(state.shortMessage)</ID>
    <ID>UseCheckOrError:CreateFunctionDialog.kt$CreateFunctionDialog$throw IllegalStateException("Failed to locate module for $element")</ID>
    <ID>UseCheckOrError:CreateFunctionDialog.kt$CreateFunctionDialog$throw IllegalStateException("LambdaBuilder for $runtime not found")</ID>
    <ID>UseCheckOrError:CreateFunctionDialog.kt$CreateFunctionDialog$throw IllegalStateException("Runtime is missing when package type is Zip")</ID>
    <ID>UseCheckOrError:CreationDialog.kt$CreationDialog$throw IllegalStateException("AppRunner creation dialog had no type selected!")</ID>
    <ID>UseCheckOrError:CredentialChoice.kt$CredentialProviderSelector2$throw IllegalStateException("Can't get credential identifier when the selection is an invalid one")</ID>
    <ID>UseCheckOrError:DataContextUtils.kt$throw IllegalStateException("Required dataId '${dataId.name}` was missing")</ID>
    <ID>UseCheckOrError:DefaultToolManager.kt$DefaultToolManager$throw IllegalStateException( message( "executableCommon.latest_not_compatible", type.displayName, it.displayValue() ) )</ID>
    <ID>UseCheckOrError:DetailedLogRecord.kt$DetailedLogRecord.Companion$throw IllegalStateException("$log format does not appear to be in a valid format (&lt;account-id>:&lt;log-group-name>)")</ID>
    <ID>UseCheckOrError:DownloadLogStream.kt$LogStreamDownloadToFileTask.&lt;no name provided>$throw IllegalStateException("Log Stream was downloaded but does not exist on disk!")</ID>
    <ID>UseCheckOrError:FileInfoCache.kt$FileInfoCache$throw IllegalStateException(message("general.file_not_found", entry))</ID>
    <ID>UseCheckOrError:FileInfoCache.kt$FileInfoCache$throw IllegalStateException(message("general.file_not_found", path))</ID>
    <ID>UseCheckOrError:HandlerCompletionProvider.kt$HandlerCompletionProvider$throw IllegalStateException("handlerCompletion must be defined if completion is enabled.")</ID>
    <ID>UseCheckOrError:HandlerPanel.kt$HandlerPanel$throw IllegalStateException("Runtime was not set in the HandlerPanel")</ID>
    <ID>UseCheckOrError:InsightsUtils.kt$throw IllegalStateException("CWL GetQueryResults returned record without @ptr field")</ID>
    <ID>UseCheckOrError:JavaDebugSupport.kt$throw IllegalStateException("Attaching to the JVM failed! $debugHost:${debugPorts.first()}")</ID>
    <ID>UseCheckOrError:JavaLambdaBuilder.kt$JavaLambdaBuilder$throw IllegalStateException(message("lambda.build.java.unsupported_build_system", module.name))</ID>
    <ID>UseCheckOrError:JavaLambdaBuilder.kt$JavaLambdaBuilder$throw IllegalStateException(message("lambda.build.unable_to_locate_project_root", module))</ID>
    <ID>UseCheckOrError:LambdaBuilder.kt$LambdaBuilder$throw IllegalStateException("Cannot map runtime $runtime to SDK runtime.")</ID>
    <ID>UseCheckOrError:LambdaBuilder.kt$LambdaBuilder$throw IllegalStateException(message("lambda.build.module_with_no_content_root", module.name))</ID>
    <ID>UseCheckOrError:LambdaBuilder.kt$LambdaBuilder.Companion$throw IllegalStateException("Failed to locate module for ${psiFile.virtualFile}")</ID>
    <ID>UseCheckOrError:LambdaConfigPanel.kt$LambdaConfigPanel$throw IllegalStateException("Unsupported package type ${packageType()}")</ID>
    <ID>UseCheckOrError:LambdaUtils.kt$throw IllegalStateException("$this has bad minSamDebuggingVersion! It should be a semver string!")</ID>
    <ID>UseCheckOrError:LambdaUtils.kt$throw IllegalStateException("$this has bad minSamInitVersion! It should be a semver string!")</ID>
    <ID>UseCheckOrError:LambdaWorkflows.kt$throw IllegalStateException("Tried to update a lambda without valid AWS connection")</ID>
    <ID>UseCheckOrError:LocalLambdaRunConfiguration.kt$LocalLambdaRunConfiguration$throw IllegalStateException("Cannot map runtime $runtime to SDK runtime.")</ID>
    <ID>UseCheckOrError:LocalLambdaRunConfiguration.kt$LocalLambdaRunConfiguration$throw IllegalStateException("Function ${logicalId()} not found in template!")</ID>
    <ID>UseCheckOrError:LocalLambdaRunConfiguration.kt$LocalLambdaRunConfiguration$throw IllegalStateException("Image functions must be a SAM function")</ID>
    <ID>UseCheckOrError:LocalLambdaRunConfiguration.kt$LocalLambdaRunConfiguration$throw IllegalStateException("No image debugger with ID ${rawImageDebugger()}")</ID>
    <ID>UseCheckOrError:LocalLambdaRunConfiguration.kt$LocalLambdaRunConfiguration$throw IllegalStateException("Unable to get virtual file for path $dockerFilePath")</ID>
    <ID>UseCheckOrError:LocalLambdaRunSettings.kt$HandlerRunSettings$throw IllegalStateException("Attempting to run SAM for unsupported runtime $runtime")</ID>
    <ID>UseCheckOrError:LocalLambdaRunSettings.kt$ImageTemplateRunSettings$throw IllegalStateException("Attempting to run SAM for unsupported language ${imageDebugger.languageId}")</ID>
    <ID>UseCheckOrError:LocalLambdaRunSettings.kt$TemplateRunSettings$throw IllegalStateException("Attempting to run SAM for unsupported runtime $runtime")</ID>
    <ID>UseCheckOrError:LocalLambdaRunSettings.kt$throw IllegalStateException("Can't find debugger support for $this")</ID>
    <ID>UseCheckOrError:OpenShellInContainerDialog.kt$OpenShellInContainerDialog$throw IllegalStateException("Task not Selected")</ID>
    <ID>UseCheckOrError:ProfileCredentialProviderFactory.kt$ProfileCredentialProviderFactory$throw IllegalStateException("Profile $sourceProfileName looks to have been removed")</ID>
    <ID>UseCheckOrError:ProfileCredentialProviderFactory.kt$ProfileCredentialProviderFactory$throw IllegalStateException("Profile ${profileProviderId.profileName} looks to have been removed")</ID>
    <ID>UseCheckOrError:ProfileCredentialProviderFactory.kt$ProfileCredentialProviderFactory$throw IllegalStateException("ProfileCredentialProviderFactory can only handle ProfileCredentialsIdentifier, but got ${providerId::class}")</ID>
    <ID>UseCheckOrError:PushToRepositoryAction.kt$PushToEcrDialog$throw IllegalStateException("image id was null")</ID>
    <ID>UseCheckOrError:PushToRepositoryAction.kt$PushToEcrDialog$throw IllegalStateException("repository uri was null")</ID>
    <ID>UseCheckOrError:PushToRepositoryAction.kt$PushToEcrDialog$throw IllegalStateException("run configuration was null")</ID>
    <ID>UseCheckOrError:PushToRepositoryAction.kt$PushToEcrDialog$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:PythonLambdaBuilder.kt$PythonLambdaBuilder.Companion$throw IllegalStateException("Cannot locate requirements.txt in a parent directory of ${startLocation.path}")</ID>
    <ID>UseCheckOrError:PythonLambdaHandlerResolver.kt$PythonLambdaHandlerResolver$throw IllegalStateException("Failed to locate requirements.txt")</ID>
    <ID>UseCheckOrError:RemoteLambdaRunSettingsEditor.kt$RemoteLambdaRunSettingsEditor$throw IllegalStateException("functionSelector.reload() called before region/credentials set")</ID>
    <ID>UseCheckOrError:Resources.kt$Function$throw IllegalStateException(message("cloudformation.invalid_property", key, type))</ID>
    <ID>UseCheckOrError:Resources.kt$SamFunction$throw IllegalStateException("Bad packageType somehow returned to code location: ${packageType()}")</ID>
    <ID>UseCheckOrError:Resources.kt$SamFunction$throw IllegalStateException(message("cloudformation.missing_property", key, logicalName))</ID>
    <ID>UseCheckOrError:RetrieveSavedQueryDialog.kt$RetrieveSavedQueryDialog.&lt;no name provided>$throw IllegalStateException("No query definition was selected")</ID>
    <ID>UseCheckOrError:RunCommandDialog.kt$RunCommandDialog$throw IllegalStateException("Task not Selected")</ID>
    <ID>UseCheckOrError:RuntimeGroup.kt$RuntimeGroup.Companion$throw IllegalStateException("No RuntimeGroup with id '$id' is registered")</ID>
    <ID>UseCheckOrError:RuntimeGroup.kt$RuntimeGroupExtensionPointObject$throw IllegalStateException("Attempted to retrieve feature for unsupported runtime group $runtimeGroup")</ID>
    <ID>UseCheckOrError:S3TreeNode.kt$S3TreeNode$throw IllegalStateException("$key has no parent!")</ID>
    <ID>UseCheckOrError:SamInitSelectionPanel.kt$SamInitSelectionPanel$throw IllegalStateException("SemVer is invalid even with valid SAM executable")</ID>
    <ID>UseCheckOrError:SamProjectWizard.kt$SamAppTemplateBased$throw IllegalStateException("Unknown packaging type: $packagingType")</ID>
    <ID>UseCheckOrError:SamTemplateUtils.kt$SamTemplateUtils$throw IllegalStateException("$codeUri does not follow the format $S3_URI_PREFIX&lt;bucket>/&lt;key>")</ID>
    <ID>UseCheckOrError:SamTemplateUtils.kt$SamTemplateUtils$throw IllegalStateException("$codeUri does not start with $S3_URI_PREFIX")</ID>
    <ID>UseCheckOrError:SamTemplateUtils.kt$SamTemplateUtils$throw IllegalStateException("Unable to parse codeUri $codeUri")</ID>
    <ID>UseCheckOrError:SamTemplateUtils.kt$SamTemplateUtils$throw IllegalStateException(message("cloudformation.invalid_property", "PackageType", type))</ID>
    <ID>UseCheckOrError:SamVersionCache.kt$SamVersionCache$throw IllegalStateException(message("executableCommon.empty_info", SamCommon.SAM_NAME))</ID>
    <ID>UseCheckOrError:SamVersionCache.kt$SamVersionCache$throw IllegalStateException(message("executableCommon.unexpected_output", SamCommon.SAM_NAME, output))</ID>
    <ID>UseCheckOrError:SamVersionCache.kt$SamVersionCache$throw IllegalStateException(message("executableCommon.version_parse_error", SamCommon.SAM_NAME, version))</ID>
    <ID>UseCheckOrError:SchemaCodeDownloader.kt$SchemaCodeDownloader.Companion$throw IllegalStateException("Attempting to use SchemaCodeDownload without valid AWS connection")</ID>
    <ID>UseCheckOrError:SchemaSelectionPanel.kt$SchemaSelectionPanel$throw IllegalStateException("Schemas is not supported by $this")</ID>
    <ID>UseCheckOrError:SingleS3ObjectAction.kt$SingleS3ObjectAction$throw IllegalStateException("SingleActionNode should only have a single node, got $nodes")</ID>
    <ID>UseCheckOrError:SqsWindowFactory.kt$SqsWindowFactory.Companion$throw IllegalStateException("Can't find tool window $TOOL_WINDOW_ID")</ID>
    <ID>UseCheckOrError:SsmPlugin.kt$SsmPlugin$throw IllegalStateException("Failed to extract $displayName\nSTDOUT:${processOutput.stdout}\nSTDERR:${processOutput.stderr}")</ID>
    <ID>UseCheckOrError:SsmPlugin.kt$SsmPlugin$throw IllegalStateException("Failed to find compatible SSM plugin: SystemInfo=${SystemInfo.OS_NAME}, Arch=${SystemInfo.OS_ARCH}")</ID>
    <ID>UseCheckOrError:SsmPlugin.kt$SsmPlugin$throw IllegalStateException("Failed to locate $executableName under $installDir")</ID>
    <ID>UseCheckOrError:SsmPlugin.kt$SsmPlugin$throw IllegalStateException("Unknown extension $extension")</ID>
    <ID>UseCheckOrError:ToolType.kt$BaseToolType$throw IllegalStateException("Failed to determine version of ${SsmPlugin.displayName}")</ID>
    <ID>UseCheckOrError:ToolkitToolWindow.kt$ToolkitToolWindow$throw IllegalStateException("Can't find tool window $toolWindowId")</ID>
    <ID>UseCheckOrError:UpdateFunctionCodeDialog.kt$UpdateFunctionCodeDialog$throw IllegalStateException("Failed to locate module for $element")</ID>
    <ID>UseCheckOrError:UpdateFunctionCodeDialog.kt$UpdateFunctionCodeDialog$throw IllegalStateException("LambdaBuilder for ${initialSettings.runtime} not found")</ID>
    <ID>UseCheckOrError:UpdateFunctionCodeDialog.kt$UpdateFunctionCodeDialog$throw IllegalStateException("Runtime is missing when package type is Zip")</ID>
    <ID>UseCheckOrError:UpdateFunctionCodePanel.kt$UpdateFunctionCodePanel$throw IllegalStateException("Unsupported package type $packageType")</ID>
    <ID>UseCheckOrError:YamlCloudFormationTemplate.kt$YamlCloudFormationTemplate.YamlCloudFormationParameter$throw IllegalStateException(message("cloudformation.missing_property", key, logicalName))</ID>
    <ID>UseCheckOrError:YamlCloudFormationTemplate.kt$YamlCloudFormationTemplate.YamlGlobal$throw IllegalStateException(message("cloudformation.missing_property", key, logicalName))</ID>
    <ID>UseCheckOrError:YamlCloudFormationTemplate.kt$YamlCloudFormationTemplate.YamlResource$throw IllegalStateException(message("cloudformation.missing_property", key, logicalName))</ID>
    <ID>UseOrEmpty:AbstractActions.kt$SingleExplorerNodeActionGroup$e?.selectedNodes&lt;T>()?.takeIf { it.size == 1 }?.first()?.let { getChildren(it, e) }?.toTypedArray() ?: emptyArray()</ID>
    <ID>UseOrEmpty:AbstractActions.kt$this?.getData(ExplorerDataKeys.SELECTED_NODES)?.mapNotNull { it as? T } ?: emptyList()</ID>
    <ID>UseOrEmpty:CodeWhispererCodeReferenceComponents.kt$CodeWhispererCodeReferenceComponents$path ?: ""</ID>
    <ID>UseOrEmpty:CodeWhispererCodeScanException.kt$file ?: ""</ID>
    <ID>UseOrEmpty:CodeWhispererCodeScanManager.kt$CodeWhispererCodeScanManager$scanNodesLookup[file]?.mapNotNull { node -> val issue = node.userObject as CodeWhispererCodeScanIssue if (issue.textRange?.overlaps(range) == true) node else null } ?: listOf()</ID>
    <ID>UseOrEmpty:CodeWhispererService.kt$CodeWhispererService$exceptionType?.let { "Exception Type: $it, " } ?: ""</ID>
    <ID>UseOrEmpty:CodeWhispererService.kt$CodeWhispererService$latency?.let { "Latency: $latency, " } ?: ""</ID>
    <ID>UseOrEmpty:CreationPanel.kt$CreationPanel$ecrUri ?: ""</ID>
    <ID>UseOrEmpty:CreationPanel.kt$CreationPanel$startCommand ?: ""</ID>
    <ID>UseOrEmpty:CredentialIdentifierSelector.kt$CredentialIdentifierSelector.&lt;no name provided>$value?.displayName ?: ""</ID>
    <ID>UseOrEmpty:DeployServerlessApplicationDialog.kt$DeployServerlessApplicationDialog$it.defaultValue() ?: ""</ID>
    <ID>UseOrEmpty:DeployServerlessApplicationDialog.kt$DeployServerlessApplicationDialog$stackName ?: ""</ID>
    <ID>UseOrEmpty:DownloadCodeForSchemaDialog.kt$DownloadCodeForSchemaDialog$getContentRootOfCurrentFile() ?: ""</ID>
    <ID>UseOrEmpty:InsightsColumnInfo.kt$LogResultColumnRenderer$(value as? String)?.trim() ?: ""</ID>
    <ID>UseOrEmpty:LocalLambdaRunSettingsEditor.kt$LocalLambdaRunSettingsEditor$configuration.handler() ?: ""</ID>
    <ID>UseOrEmpty:LogGroupSelectorTable.kt$LogGroupSelectorTable.Companion.LogGroupNameColumnInfo$value ?: ""</ID>
    <ID>UseOrEmpty:NotificationUtils.kt$&lt;no name provided>$title ?: ""</ID>
    <ID>UseOrEmpty:PythonLambdaHandlerResolver.kt$PythonLambdaHandlerResolver$handler.substringBeforeLast('/', "").nullize(true)?.split("/") ?: emptyList()</ID>
    <ID>UseOrEmpty:SamTemplateUtils.kt$SamTemplateUtils$MAPPER.convertValue&lt;Map&lt;String, String>?>(globals) ?: emptyMap()</ID>
    <ID>UseOrEmpty:SamTemplateUtils.kt$SamTemplateUtils$MAPPER.convertValue&lt;Map&lt;String, String>?>(variables) ?: emptyMap()</ID>
    <ID>UseOrEmpty:TableUtils.kt$LogStreamsStreamColumnRenderer$(value as? String)?.trim() ?: ""</ID>
    <ID>UseOrEmpty:TemplateSettings.kt$TemplateSettings$path ?: ""</ID>
    <ID>UseOrEmpty:ToolConfigurable.kt$ToolConfigurable$settings.getExecutablePath(toolType) ?: ""</ID>
    <ID>UseOrEmpty:ToolkitCredentialProcessProvider.kt$ToolkitCredentialProcessProvider$errorOutput?.let { ": $it" } ?: ""</ID>
    <ID>UseOrEmpty:ToolkitToolWindow.kt$ToolkitToolWindow$it.getUserData(AWS_TOOLKIT_TAB_ID_KEY) ?: ""</ID>
    <ID>UseOrEmpty:UiUtils.kt$WrappingCellRenderer$(value as? String) ?: ""</ID>
    <ID>UseOrEmpty:UpdateFunctionConfigDialog.kt$UpdateFunctionConfigDialog$initialSettings.envVariables ?: emptyMap()</ID>
    <ID>UseOrEmpty:Updater.kt$Updater$eventsAndButtonStates?.first ?: emptyList()</ID>
    <ID>UseRequire:AwsSettingsConfigurable.kt$AwsSettingsConfigurable$throw IllegalArgumentException("Set file is not an executable")</ID>
    <ID>UseRequire:FourPartVersion.kt$FourPartVersion.Companion$throw IllegalArgumentException("[$version] not in the format of MAJOR.MINOR.PATCH.BUILD")</ID>
    <ID>UseRequire:ProfileUtils.kt$throw IllegalArgumentException(message("credentials.profile.assume_role.duplicate_source", currentProfileName))</ID>
    <ID>UseRequire:ProfileUtils.kt$throw IllegalArgumentException(message("credentials.profile.assume_role.missing_source", currentProfileName))</ID>
    <ID>UseRequire:Queue.kt$Queue$throw IllegalArgumentException(message("sqs.url.parse_error"))</ID>
    <ID>UseRequire:SemanticVersion.kt$SemanticVersion.Companion$throw IllegalArgumentException("[$version] not in the format of MAJOR.MINOR.PATCH")</ID>
    <ID>UselessCallOnNotNull:DeleteResourceDialog.kt$DeleteResourceDialog$comment.isNullOrEmpty()</ID>
  </CurrentIssues>
</SmellBaseline>
