// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

package software.aws.toolkits.jetbrains.services.lambda.execution.sam

import com.intellij.execution.configurations.GeneralCommandLine
import com.intellij.execution.process.CapturingProcessHandler
import com.intellij.openapi.vfs.VirtualFile
import software.amazon.awssdk.services.lambda.model.Runtime
import software.aws.toolkits.jetbrains.settings.SamSettings

internal class SamInitRunner {
    /*
$ sam help
Usage: sam init [OPTIONS]
...
...
Options:
  -l, --location TEXT             Template location (git, mercurial, http(s),
                                  zip, path)
  -r, --runtime [python3.6|python2.7|python|nodejs6.10|nodejs8.10|nodejs4.3|nodejs|dotnetcore2.0|dotnetcore1.0|dotnetcore|dotnet|go1.x|go|java8|java]
                                  Lambda Runtime of your app
  -o, --output-dir PATH           Where to output the initialized app into
  -n, --name TEXT                 Name of your project to be generated as a
                                  folder
  --no-input                      Disable prompting and accept default values
                                  defined template config
  --debug                         Turn on debug logging to print debug message
                                  generated by SAM CLI.
  -h, --help                      Show this message and exit.
     */
    private val samCliExecutable = SamSettings.getInstance().executablePath
    private var commandLine = GeneralCommandLine()
            .withExePath(samCliExecutable)
            .withParameters("--debug")
            .withParentEnvironmentType(GeneralCommandLine.ParentEnvironmentType.CONSOLE)
            .withParameters("init")

    fun applyRuntime(runtime: Runtime) = applyParameter("--runtime", runtime.toString())

    fun applyName(name: String) = applyParameter("--name", name)

    fun applyOutputDir(location: VirtualFile) = applyParameter("--output-dir", location.path)

    private fun applyParameter(flag: String, value: String) = apply {
        commandLine = commandLine.withParameters(flag)
                .withParameters(value)
    }

    fun execute() {
        println(commandLine.commandLineString)
        val process = CapturingProcessHandler(commandLine).runProcess()
        if (process.exitCode != 0) {
            throw RuntimeException("Could not execute `sam init`!: ${process.stderrLines.last()}")
        }
    }
}