<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>UnreachableCode:GoHelper.kt$GoDebugHelper$Files.copy(dlvFolder.resolve("dlv").toPath(), directory.resolve("dlv"))</ID>
    <ID>UnreachableCode:GoHelper.kt$GoDebugHelper$directory.resolve("dlv").toFile().setExecutable(true)</ID>
    <ID>UnreachableCode:GoHelper.kt$GoDebugHelper$return directory.toAbsolutePath().toString()</ID>
    <ID>UnreachableCode:GoHelper.kt$GoDebugHelper$val directory = Files.createTempDirectory("goDebugger")</ID>
    <ID>UnreachableCode:GoHelper.kt$GoDebugHelper$val dlvFolder = GoRunUtil.getBundledDlv(null)?.parentFile?.parentFile?.resolve("linux") ?: throw IllegalStateException("Packaged Devle debugger is not found!")</ID>
    <ID>UnreachableCode:IamAuth.kt$IamAuth$if (user.isBlank()) { throw IllegalArgumentException(message("rds.validation.username")) }</ID>
    <ID>UnreachableCode:IamAuth.kt$IamAuth$return RdsAuth( signingUrl, signingPort, user, connection.getAwsConnectionSettings() )</ID>
    <ID>UnreachableCode:IamAuth.kt$IamAuth$val signingPort = connection.connectionPoint.additionalProperties[RDS_SIGNING_PORT_PROPERTY]?.toIntOrNull() ?: connection.connectionPoint.url.portFromJdbcString()?.toIntOrNull() ?: throw IllegalArgumentException(message("rds.validation.no_instance_port"))</ID>
    <ID>UnreachableCode:IamAuth.kt$IamAuth$val signingUrl = connection.connectionPoint.additionalProperties[RDS_SIGNING_HOST_PROPERTY] ?: connection.connectionPoint.url.hostFromJdbcString() ?: throw IllegalArgumentException(message("rds.validation.no_instance_host"))</ID>
    <ID>UnreachableCode:IamAuth.kt$IamAuth$val user = connection.connectionPoint.dataSource.username</ID>
    <ID>UnreachableCode:SecretsManagerAuth.kt$SecretsManagerAuth$dbSecret.password ?: throw IllegalArgumentException(message("datagrip.secretsmanager.validation.no_password", secret.name()))</ID>
    <ID>UnreachableCode:SecretsManagerAuth.kt$SecretsManagerAuth$return dbSecret</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$id(envId)</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$if (initialEnv.alias().nullize() != alias.getText().nullize()) { it.alias(alias.getText().orEmpty()) }</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$if (initialEnv.inactivityTimeoutMinutes() != timeoutSelected) { it.inactivityTimeoutMinutes(timeoutSelected) }</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$if (initialEnv.instanceType() != instanceSizeSelected) { it.instanceType(instanceSizeSelected) }</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$initialEnv.alias()?.let { alias.text.set(it) }</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$it</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$it.projectName(projectName)</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$it.spaceName(org)</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$launchChildOnUi { it.replaceWith( verticalGrid { row { horizontalGrid { column { link(message("caws.open.devfile"), lifetime) { val project = inferActiveProject() try { val devfileLocation = CawsEnvironmentClient.getInstance().getStatus().location ?: "devfile.yaml" // The path returned by getStatus() is relative to /projects val devfilePath = VirtualFileManager.getInstance().findFileByNioPath( Path.of("${CawsConstants.CAWS_ENV_PROJECT_DIR}/$devfileLocation") ) if (devfilePath != null) { FileEditorManager.getInstance(project).openFile(devfilePath, true) } } catch (e: Exception) { val failedToOpenDevfile = message("caws.open.devfile.failed") LOG.error(e) { failedToOpenDevfile } notifyError(failedToOpenDevfile, "$failedToOpenDevfile: ${e.message}", project) } } } } } row { horizontalGrid { column { label(message("caws.workspace.details.alias.label")) } column { alias } } } row { horizontalGrid { column { label(message("caws.workspace.details.inactivity_timeout")) } column { combobox( lifetime, timeout, selectedValue = InactivityTimeout(Duration.ofMinutes(initialEnv.inactivityTimeoutMinutes().toLong())), handleSelected = { timeoutSelected = it.asMinutes() }, presentation = { label(it.displayText()) } ) } } } row { horizontalGrid { column { label(message("caws.workspace.instance_size")) } column { combobox(lifetime, instanceSize, selectedValue = initialEnv.instanceType(), handleSelected = { instanceSizeSelected = it }, presentation = { // TODO: Velox to provide API for this info label(it.toString().substringAfter("dev.standard1.").capitalize()) }) } } } row(BeSizingType.Fit, BeAlignment.Right) { button(message("caws.configure_workspace_tab_save_button"), lifetime) { lifetime.launchIOBackground buttonAction@{ if (initialEnv.instanceType() == instanceSizeSelected &amp;&amp; initialEnv.alias().nullize() == alias.getText().nullize() &amp;&amp; initialEnv.inactivityTimeoutMinutes() == timeoutSelected ) { // noop return@buttonAction } var result = TelemetryResult.Succeeded try { lifetime.launchUnderBackgroundProgress(message("caws.update_dev_environment")) { client.updateDevEnvironment { it.id(envId) it.spaceName(org) it.projectName(projectName) if (initialEnv.instanceType() != instanceSizeSelected) { it.instanceType(instanceSizeSelected) } if (initialEnv.alias().nullize() != alias.getText().nullize()) { it.alias(alias.getText().orEmpty()) } if (initialEnv.inactivityTimeoutMinutes() != timeoutSelected) { it.inactivityTimeoutMinutes(timeoutSelected) } } }.join() } catch (e: Exception) { result = TelemetryResult.Failed val message = message("caws.update_dev_environment.failed") LOG.error(e) { message } notifyError(message, e.message ?: message("general.unknown_error"), project = inferActiveProject()) } CodecatalystTelemetry.updateDevEnvironmentSettings( project = null, userId = lazilyGetUserId(), codecatalystUpdateDevEnvironmentLocationType = CodecatalystUpdateDevEnvironmentLocationType.Remote, result = result ) } } } } ) }</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$val alias = textBox(lifetime, false, "caws.development.workspace.alias", UpdateSourceTrigger.TextChanged)</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$val client = connection.awsClient&lt;CodeCatalystClient>()</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$val envId = System.getenv(CawsConstants.CAWS_ENV_ID_VAR) ?: error("envId env var null")</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$val initialEnv = client.getDevEnvironment { it.id(envId) it.spaceName(org) it.projectName(projectName) }</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$val instanceSize = loadParameterDescriptions().environmentParameters.instanceTypes.keys.let { types -> if (isFree) { types.filter { it.isSupportedInFreeTier() } } else { types } }.toList()</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$val isFree = isSubscriptionFreeTier(client, org)</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$val org = System.getenv(CawsConstants.CAWS_ENV_ORG_NAME_VAR) ?: error("space env var null")</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$val projectName = System.getenv(CawsConstants.CAWS_ENV_PROJECT_NAME_VAR) ?: error("project env var null")</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$val timeout = InactivityTimeout.DEFAULT_VALUES.toList()</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$var instanceSizeSelected = initialEnv.instanceType()</ID>
    <ID>UnreachableCode:UpdateWorkspaceSettingsTab.kt$UpdateWorkspaceSettingsTab$var timeoutSelected = initialEnv.inactivityTimeoutMinutes()</ID>
    <ID>UseCheckOrError:AddSecretsManagerConnection.kt$AddSecretsManagerConnection$throw IllegalStateException(message("datagrip.secretsmanager.validation.unkown_engine", secret.engine.toString()))</ID>
    <ID>UseCheckOrError:CreateIamDataSourceAction.kt$throw IllegalStateException("Newly inserted data source is not in the data source registry!")</ID>
    <ID>UseCheckOrError:GoHelper.kt$GoDebugHelper$throw IllegalStateException("Packaged Devle debugger is not found!")</ID>
    <ID>UseCheckOrError:GoLambdaBuilder.kt$GoLambdaBuilder$throw IllegalStateException("Cannot locate go.mod for $handlerVirtualFile")</ID>
    <ID>UseCheckOrError:NodeJsLambdaBuilder.kt$NodeJsLambdaBuilder.Companion$throw IllegalStateException("Cannot locate package.json for $handlerVirtualFile")</ID>
    <ID>UseCheckOrError:RedshiftUtils.kt$throw IllegalStateException("Newly inserted data source is not in the data source registry!")</ID>
    <ID>UseOrEmpty:RedshiftUtils.kt$tryOrNull { this.getResourceIfPresent(StsResources.ACCOUNT) } ?: ""</ID>
    <ID>UseRequire:DatagripUtils.kt$throw IllegalArgumentException(message("rds.validation.aurora_mysql_ssl_required"))</ID>
    <ID>UseRequire:IamAuth.kt$IamAuth$throw IllegalArgumentException(message("rds.validation.username"))</ID>
    <ID>UseRequire:IamAuth.kt$IamAuth$throw IllegalArgumentException(message("redshift.validation.cluster_does_not_exist", settings.clusterId, settings.connectionSettings.region.id))</ID>
    <ID>UseRequire:IamAuth.kt$IamAuth$throw IllegalArgumentException(message("redshift.validation.username"))</ID>
  </CurrentIssues>
</SmellBaseline>
