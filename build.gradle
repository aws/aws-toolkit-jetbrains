buildscript {
    ext.kotlinVersion = "$kotlinVersion"

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/" // TODO: Can we get rid of SNAPSHOTS?
        }
        maven {
            url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "gradle.plugin.org.jmailen.gradle:kotlinter-gradle:$kotlinterPluginVersion"
        classpath "org.jetbrains.intellij.plugins:gradle-intellij-plugin:$ideaPluginVersion"
    }
}

group 'software.aws.toolkits'
version '0.1-SNAPSHOT'

allprojects {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'org.jetbrains.intellij'
intellij {
    version "IC-" + ideaVersion
    pluginName 'aws-intellij-toolkit'
    updateSinceUntilBuild false
    downloadSources = System.getenv("CI") == null
}

dependencies {
    compile project(':jetbrains-core')
    compile project(':jetbrains-ultimate')
}

// Workaround for runIde being defined in multiple projects, if we request the root project runIde, all others will
// be disabled
if (gradle.startParameter.taskNames.contains("runIde")) {
    println("Top level runIde selected, excluding sub-projects' runIde")
    gradle.taskGraph.whenReady { graph ->
        graph.allTasks.forEach {
            if (it.name == "runIde" && it.project != gradle.rootProject) {
                it.enabled = false
            }
        }
    }
}

subprojects {
    group = parent.group
    version = parent.version

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'org.jmailen.kotlinter'

    sourceSets {
        main.java.srcDir 'src'
        main.resources.srcDir 'resources'
        test.java.srcDir 'tst'
        test.resources.srcDir 'tst-resources'
        integrationTest {
            java.srcDir 'it'
            kotlin.srcDir 'it'
            resources.srcDir 'it-resources'
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        testCompile("com.willowtreeapps.assertk:assertk:0.9")
        testCompile group: 'junit', name: 'junit', version: '4.12'

        integrationTestCompile sourceSets.main.output
        integrationTestCompile sourceSets.test.output

        integrationTestCompile configurations.compile
        integrationTestCompile configurations.testCompile

        integrationTestRuntime configurations.runtime
        integrationTestRuntime configurations.testRuntime
    }

    idea {
        module {
            sourceDirs -= file("it")
            testSourceDirs += file("it")

            sourceDirs -= file("it-resources")
            testSourceDirs += file("it-resources")
        }
    }

    tasks.withType(JavaCompile).all {
        options.compilerArgs << "-Werror"
    }

    task integrationTest(type: Test) {
        group = LifecycleBasePlugin.VERIFICATION_GROUP
        description = "Runs the integration tests."
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        binResultsDir = file("$buildDir/integration-test-results/binary/integrationTest")

        reports {
            html.destination file("$buildDir/reports/integration-test")
            junitXml.destination file("$buildDir/integration-test-results")
        }

        mustRunAfter tasks.test
    }

    compileKotlin {
        kotlinOptions.allWarningsAsErrors = true
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.allWarningsAsErrors = true
        kotlinOptions.jvmTarget = "1.8"
    }
    compileIntegrationTestKotlin {
        kotlinOptions.allWarningsAsErrors = true
        kotlinOptions.jvmTarget = "1.8"
    }

    build.dependsOn(integrationTestClasses)

    // Remove the tasks added in by gradle-intellij-plugin so that we don't publish/verify multiple times
    project.afterEvaluate {
        removeTask(tasks, 'publishPlugin')
        removeTask(tasks, 'verifyPlugin')
    }
}

def removeTask(tasks, taskName) {
    def task = tasks.findByName("$taskName")

    if (task != null) {
        tasks.remove(task)
    }
}

wrapper {
    gradleVersion '4.5'
}

