// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext.kotlinVersion = "$kotlinVersion"

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "com.atlassian.commonmark:commonmark:0.11.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:$ideaPluginVersion"
    }
}

group 'software.aws.toolkits'
version toolkitVersion

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'jacoco'
}

subprojects {
    group = parent.group
    version = parent.version

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'signing'

    def isReleaseVersion = !version.endsWith("SNAPSHOT")

    signing {
        required { isReleaseVersion && gradle.startParameter.taskNames.contains("publishPlugin") }
        sign configurations.archives
    }

    sourceSets {
        main.java.srcDir 'src'
        main.resources.srcDir 'resources'
        test.java.srcDir 'tst'
        test.resources.srcDir 'tst-resources'
        integrationTest {
            java.srcDir 'it'
            kotlin.srcDir 'it'
            resources.srcDir 'it-resources'
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        // TODO: Replace assertk with assertj
        testCompile("com.willowtreeapps.assertk:assertk:0.9")
        testCompile "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC1"
        testCompile "org.assertj:assertj-core:$assertjVersion"
        testCompile "junit:junit:$junitVersion"
        testCompile "org.hamcrest:hamcrest-all:1.3"

        integrationTestCompile sourceSets.main.output
        integrationTestCompile sourceSets.test.output

        integrationTestCompile configurations.compile
        integrationTestCompile configurations.testCompile

        integrationTestRuntime configurations.runtime
        integrationTestRuntime configurations.testRuntime
    }

    test {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    idea {
        module {
            sourceDirs -= file("it")
            testSourceDirs += file("it")

            sourceDirs -= file("it-resources")
            testSourceDirs += file("it-resources")
        }
    }

    if (gradle.startParameter.taskNames.contains("check")) {
        tasks.withType(JavaCompile).all {
            options.compilerArgs << "-Werror"
        }
        tasks.withType(KotlinCompile).all {
            kotlinOptions.allWarningsAsErrors = true
        }
    }

    task integrationTest(type: Test) {
        group = LifecycleBasePlugin.VERIFICATION_GROUP
        description = "Runs the integration tests."
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        binResultsDir = file("$buildDir/integration-test-results/binary/integrationTest")

        reports {
            html.destination file("$buildDir/reports/integration-test")
            junitXml.destination file("$buildDir/integration-test-results")
        }

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }

        jacoco {
            excludes = ["com.sun.*"] // See https://groups.google.com/forum/#!topic/jacoco/H0gDwxNuhK4
        }

        mustRunAfter tasks.test
    }

    tasks.withType(KotlinCompile).all {
        kotlinOptions.jvmTarget = "1.8"
    }

    // Force us to compile the integration tests even during check even though we don't run them
    check.dependsOn(integrationTestClasses)

    // Remove the tasks added in by gradle-intellij-plugin so that we don't publish/verify multiple times
    project.afterEvaluate {
        removeTask(tasks, 'publishPlugin')
        removeTask(tasks, 'verifyPlugin')
        if (!isReleaseVersion) {
            removeTask(tasks, "signArchives")
        }
    }
}

configurations {
    ktlint
}

def removeTask(tasks, taskName) {
    def task = tasks.findByName("$taskName")

    if (task != null) {
        tasks.remove(task)
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion '4.6'
}

apply plugin: 'org.jetbrains.intellij'
apply plugin: ChangeLogPlugin

intellij {
    version "IC-" + ideaVersion
    pluginName 'aws-jetbrains-toolkit'
    updateSinceUntilBuild false
    downloadSources = System.getenv("CI") == null
    if (System.env.ALTERNATIVE_IDE) {
        alternativeIdePath = System.env.ALTERNATIVE_IDE
    }
}

generateChangeLog {
    generateJetbrains = false
    generateGithub = false //Switch back on when change log comes back
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args project.rootDir.absolutePath + "/**/*.kt"
}
check.dependsOn ktlint

def publishedProjects = subprojects.findAll { !it.name.contains("test")}

jacoco {
    toolVersion = "0.8.2"
}

task coverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    additionalSourceDirs = files(publishedProjects.sourceSets.main.java.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.java.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output.classesDirs)

    reports {
        html.enabled true
        xml.enabled true
    }
}
publishedProjects.forEach {
    coverageReport.mustRunAfter(it.tasks.withType(Test))
}
check.dependsOn coverageReport

// Workaround for runIde being defined in multiple projects, if we request the root project runIde, "alias" it to
// community edition
if (gradle.startParameter.taskNames.contains("runIde")) {
    println("Top level runIde selected, excluding sub-projects' runIde")
    gradle.taskGraph.whenReady { graph ->
        graph.allTasks.forEach {
            if (it.name == "runIde" && it.project != project(':jetbrains-core')) {
                it.enabled = false
            }
        }
    }
}

dependencies {
    compile project(':jetbrains-core') 

    ktlint "com.github.shyiko:ktlint:$ktlintVersion"
    ktlint project(":ktlint-rules")
}